#pragma version 11
intcblock 1 0 24 4294967295 2 32
bytecblock 0x 0x6f776e6572 0x616d6f756e74 0x151f7c75

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0
	retsub

// register(pay,address)address
*abi_route_register:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	intc 5 // 32
	==

	// argument 0 (owner) for register must be a address
	assert

	// payment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (payment) for register must be a pay transaction
	assert

	// execute register(pay,address)address
	callsub register
	concat
	log
	intc 0 // 1
	return

// register(payment: PayTxn, owner: Address): Address
register:
	proto 2 1

	// contracts/TossUp.algo.ts:13
	// verifyPayTxn(payment, { amount: { greaterThan: 0 } })
	// verify amount
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	intc 1 // 0
	>

	// transaction verification failed: {"txn":"payment","field":"amount","condition":"greaterThan","expected":">0"}
	assert

	// contracts/TossUp.algo.ts:14
	// this.owner.value = owner
	bytec 1 //  "owner"
	frame_dig -2 // owner: Address
	app_global_put

	// contracts/TossUp.algo.ts:15
	// this.amount.value = payment.amount
	bytec 2 //  "amount"
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	app_global_put

	// contracts/TossUp.algo.ts:16
	// return this.owner.value;
	bytec 1 //  "owner"
	app_global_get
	retsub

// getRandom(player: Address): uint64
getRandom:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts/TossUp.algo.ts:22
	// blockSeed =
	//       extractUint64(blocks[this.txn.firstValid - 1].seed, blocks[this.txn.firstValid - 1].timestamp % 24) % 24
	txn FirstValid
	intc 0 // 1
	-
	block BlkSeed
	txn FirstValid
	intc 0 // 1
	-
	block BlkTimestamp
	intc 2 // 24
	%
	extract_uint64
	intc 2 // 24
	%
	frame_bury 1 // blockSeed: uint64

	// contracts/TossUp.algo.ts:25
	// proposer = blocks[this.txn.firstValid - 1].proposer
	txn FirstValid
	intc 0 // 1
	-
	block BlkProposer
	frame_bury 2 // proposer: address

	// contracts/TossUp.algo.ts:33
	// playerSeed = extractUint64(player, blockSeed) % maxSeed
	frame_dig -1 // player: Address
	frame_dig 1 // blockSeed: uint64
	extract_uint64
	intc 3 // 4294967295
	%
	frame_bury 3 // playerSeed: uint64

	// contracts/TossUp.algo.ts:35
	// ownerSeed = extractUint64(this.owner.value, blockSeed) % maxSeed
	bytec 1 //  "owner"
	app_global_get
	frame_dig 1 // blockSeed: uint64
	extract_uint64
	intc 3 // 4294967295
	%
	frame_bury 4 // ownerSeed: uint64

	// contracts/TossUp.algo.ts:37
	// intraRoundRandomness = (playerSeed * ownerSeed) % 24
	frame_dig 3 // playerSeed: uint64
	frame_dig 4 // ownerSeed: uint64
	*
	intc 2 // 24
	%
	frame_bury 5 // intraRoundRandomness: uint64

	// *if0_condition
	// contracts/TossUp.algo.ts:39
	// proposer === globals.zeroAddress
	frame_dig 2 // proposer: address
	global ZeroAddress
	==
	bz *if0_else

	// *if0_consequent
	// contracts/TossUp.algo.ts:41
	// seed = extractUint64(player, intraRoundRandomness)
	frame_dig -1 // player: Address
	frame_dig 5 // intraRoundRandomness: uint64
	extract_uint64
	frame_bury 0 // seed: uint64
	b *if0_end

*if0_else:
	// contracts/TossUp.algo.ts:43
	// seed = extractUint64(proposer, intraRoundRandomness)
	frame_dig 2 // proposer: address
	frame_dig 5 // intraRoundRandomness: uint64
	extract_uint64
	frame_bury 0 // seed: uint64

*if0_end:
	// contracts/TossUp.algo.ts:46
	// return seed;
	frame_dig 0 // seed: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// play(pay,address)uint64
*abi_route_play:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// player: address
	txna ApplicationArgs 1
	dup
	len
	intc 5 // 32
	==

	// argument 0 (player) for play must be a address
	assert

	// payment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (payment) for play must be a pay transaction
	assert

	// execute play(pay,address)uint64
	callsub play
	itob
	concat
	log
	intc 0 // 1
	return

// play(payment: PayTxn, player: Address): uint64
play:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/TossUp.algo.ts:51
	// asserts(player !== this.owner.value, this.amount.value === payment.amount, this.txn.sender === this.app.creator)
	frame_dig -2 // player: Address
	bytec 1 //  "owner"
	app_global_get
	!=

	// asserts failed: asserts(player !== this.owner.value, this.amount.value === payment.amount, this.txn.sender === this.app.creator)
	assert
	bytec 2 //  "amount"
	app_global_get
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	==

	// asserts failed: asserts(player !== this.owner.value, this.amount.value === payment.amount, this.txn.sender === this.app.creator)
	assert
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// asserts failed: asserts(player !== this.owner.value, this.amount.value === payment.amount, this.txn.sender === this.app.creator)
	assert

	// contracts/TossUp.algo.ts:53
	// seed = this.getRandom(player)
	frame_dig -2 // player: Address
	callsub getRandom
	frame_bury 0 // seed: uint64

	// *if1_condition
	// contracts/TossUp.algo.ts:55
	// seed % 2 === 0
	frame_dig 0 // seed: uint64
	intc 4 // 2
	%
	intc 1 // 0
	==
	bz *if1_else

	// *if1_consequent
	// contracts/TossUp.algo.ts:56
	// sendPayment({ receiver: this.owner.value, amount: this.amount.value + payment.amount })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TossUp.algo.ts:56
	// receiver: this.owner.value
	bytec 1 //  "owner"
	app_global_get
	itxn_field Receiver

	// contracts/TossUp.algo.ts:56
	// amount: this.amount.value + payment.amount
	bytec 2 //  "amount"
	app_global_get
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	+
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if1_end

*if1_else:
	// contracts/TossUp.algo.ts:58
	// sendPayment({ receiver: player, amount: this.amount.value + payment.amount })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TossUp.algo.ts:58
	// receiver: player
	frame_dig -2 // player: Address
	itxn_field Receiver

	// contracts/TossUp.algo.ts:58
	// amount: this.amount.value + payment.amount
	bytec 2 //  "amount"
	app_global_get
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	+
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	// contracts/TossUp.algo.ts:61
	// sendPayment({ closeRemainderTo: this.owner.value })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/TossUp.algo.ts:61
	// closeRemainderTo: this.owner.value
	bytec 1 //  "owner"
	app_global_get
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/TossUp.algo.ts:62
	// return seed % 2;
	frame_dig 0 // seed: uint64
	intc 4 // 2
	%

	// set the subroutine return value
	frame_bury 0
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xe6d6d9e6 // method "register(pay,address)address"
	txna ApplicationArgs 0
	match *abi_route_register

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	pushbytes 0x155ceffa // method "play(pay,address)uint64"
	txna ApplicationArgs 0
	match *abi_route_play

	// this contract does not implement the given ABI method for call DeleteApplication
	err