#pragma version 11
intcblock 1 0 6
bytecblock 0x 0x706c6179657257696e73 0x6f776e657257696e73 0xb8447b36

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 2 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/GameMaker.algo.ts:14
	// this.ownerWins.value = 0
	bytec 2 //  "ownerWins"
	intc 1 // 0
	app_global_put

	// contracts/GameMaker.algo.ts:15
	// this.playerWins.value = 0
	bytec 1 //  "playerWins"
	intc 1 // 0
	app_global_put
	retsub

// register(pay)uint64
*abi_route_register:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// payment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (payment) for register must be a pay transaction
	assert

	// execute register(pay)uint64
	callsub register
	itob
	concat
	log
	intc 0 // 1
	return

// register(payment: PayTxn): AppID
register:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/GameMaker.algo.ts:19
	// verifyPayTxn(payment, { amount: { greaterThan: 0 } })
	// verify amount
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	intc 1 // 0
	>

	// transaction verification failed: {"txn":"payment","field":"amount","condition":"greaterThan","expected":">0"}
	assert

	// contracts/GameMaker.algo.ts:21
	// currentMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // currentMBR: uint64

	// contracts/GameMaker.algo.ts:23
	// sendMethodCall<typeof TossUp.prototype.createApplication>({
	//       clearStateProgram: TossUp.clearProgram(),
	//       approvalProgram: TossUp.approvalProgram(),
	//       methodArgs: [],
	//       globalNumByteSlice: TossUp.schema.global.numByteSlice,
	//       globalNumUint: TossUp.schema.global.numUint,
	//       localNumByteSlice: TossUp.schema.local.numByteSlice,
	//       localNumUint: TossUp.schema.local.numUint,
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 3 //  method "createApplication()void"
	itxn_field ApplicationArgs

	// contracts/GameMaker.algo.ts:24
	// clearStateProgram: TossUp.clearProgram()
	pushbytes 0x0b
	itxn_field ClearStateProgram

	// contracts/GameMaker.algo.ts:25
	// approvalProgram: TossUp.approvalProgram()
	pushbytes 0x0b2006010018ffffffff0f0220260400056f776e657206616d6f756e7404151f7c7531181481060b3119088d0c01300000000000000000013e0122000000000000000000000088000222438a0000892b361a014915210512443116220949381022124488000450b022438a02018bff3808230d44298bfe672a8bff3808672964898a010128470531022209d10031022209d10124185b24188c0131022209d1028c028bff8b015b25188c0329648b015b25188c048b038b040b24188c058b0232031241000a8bff8b055b8c004200078b028b055b8c008b008c004605892b361a01491521051244311622094938102212448800051650b022438a0201288bfe296413442a648bff38081244310036320072074812448bfe88ff678c008b002104182312410018b122b2102964b2072a648bff380808b20823b201b3420015b122b2108bfeb2072a648bff380808b20823b201b3b122b2102964b20923b201b38b002104188c00898004b8447b36361a008e01fed2008004e6d6d9e6361a008e01fecd008004155ceffa361a008e01ff4d00
	itxn_field ApprovalProgram

	// contracts/GameMaker.algo.ts:26
	// methodArgs: []
	// contracts/GameMaker.algo.ts:27
	// globalNumByteSlice: TossUp.schema.global.numByteSlice
	intc 0 // 1
	itxn_field GlobalNumByteSlice

	// contracts/GameMaker.algo.ts:28
	// globalNumUint: TossUp.schema.global.numUint
	intc 0 // 1
	itxn_field GlobalNumUint

	// contracts/GameMaker.algo.ts:29
	// localNumByteSlice: TossUp.schema.local.numByteSlice
	intc 1 // 0
	itxn_field LocalNumByteSlice

	// contracts/GameMaker.algo.ts:30
	// localNumUint: TossUp.schema.local.numUint
	intc 1 // 0
	itxn_field LocalNumUint

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/GameMaker.algo.ts:32
	// mbrDelta = this.app.address.minBalance - currentMBR
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_dig 0 // currentMBR: uint64
	-
	frame_bury 1 // mbrDelta: uint64

	// contracts/GameMaker.algo.ts:34
	// gameApp = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury 2 // gameApp: uint64

	// contracts/GameMaker.algo.ts:35
	// sendMethodCall<typeof TossUp.prototype.register>({
	//       applicationID: gameApp,
	//       methodArgs: [{ amount: payment.amount - mbrDelta, receiver: gameApp.address }, this.txn.sender],
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/GameMaker.algo.ts:37
	// amount: payment.amount - mbrDelta
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	frame_dig 1 // mbrDelta: uint64
	-
	itxn_field Amount

	// contracts/GameMaker.algo.ts:37
	// receiver: gameApp.address
	frame_dig 2 // gameApp: uint64
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xe6d6d9e6 // method "register(pay,address)address"
	itxn_field ApplicationArgs

	// contracts/GameMaker.algo.ts:36
	// applicationID: gameApp
	frame_dig 2 // gameApp: uint64
	itxn_field ApplicationID

	// contracts/GameMaker.algo.ts:37
	// methodArgs: [{ amount: payment.amount - mbrDelta, receiver: gameApp.address }, this.txn.sender]
	txn Sender
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 0 // 1
	-
	itxnas Logs
	extract 4 0

	// contracts/GameMaker.algo.ts:40
	// return gameApp;
	frame_dig 2 // gameApp: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// play(pay,uint64)void
*abi_route_play:
	// appID: uint64
	txna ApplicationArgs 1
	btoi

	// payment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (payment) for play must be a pay transaction
	assert

	// execute play(pay,uint64)void
	callsub play
	intc 0 // 1
	return

// play(payment: PayTxn, appID: AppID): void
play:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/GameMaker.algo.ts:44
	// owner = appID.globalState('owner') as Address
	frame_dig -2 // appID: AppID
	pushbytes 0x6f776e6572 // "owner"
	app_global_get_ex

	// global state value does not exist: appID.globalState('owner')
	assert
	frame_bury 0 // owner: address

	// contracts/GameMaker.algo.ts:45
	// result = sendMethodCall<typeof TossUp.prototype.play>({
	//       applicationID: appID,
	//       methodArgs: [{ amount: payment.amount, receiver: appID.address }, this.txn.sender],
	//       onCompletion: OnCompletion.DeleteApplication,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/GameMaker.algo.ts:47
	// amount: payment.amount
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	itxn_field Amount

	// contracts/GameMaker.algo.ts:47
	// receiver: appID.address
	frame_dig -2 // appID: AppID
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x155ceffa // method "play(pay,address)uint64"
	itxn_field ApplicationArgs

	// contracts/GameMaker.algo.ts:46
	// applicationID: appID
	frame_dig -2 // appID: AppID
	itxn_field ApplicationID

	// contracts/GameMaker.algo.ts:47
	// methodArgs: [{ amount: payment.amount, receiver: appID.address }, this.txn.sender]
	txn Sender
	itxn_field ApplicationArgs

	// contracts/GameMaker.algo.ts:48
	// onCompletion: OnCompletion.DeleteApplication
	pushint 5 // DeleteApplication
	itxn_field OnCompletion

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 0 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 1 // result: uint64

	// *if0_condition
	// contracts/GameMaker.algo.ts:51
	// result === 0
	frame_dig 1 // result: uint64
	intc 1 // 0
	==
	bz *if0_end

	// *if0_consequent
	// contracts/GameMaker.algo.ts:51
	// this.ownerWins.value += 1
	bytec 2 //  "ownerWins"
	app_global_get
	intc 0 // 1
	+
	bytec 2 //  "ownerWins"
	swap
	app_global_put

*if0_end:
	// *if1_condition
	// contracts/GameMaker.algo.ts:52
	// result === 1
	frame_dig 1 // result: uint64
	intc 0 // 1
	==
	bz *if1_end

	// *if1_consequent
	// contracts/GameMaker.algo.ts:52
	// this.playerWins.value += 1
	bytec 1 //  "playerWins"
	app_global_get
	intc 0 // 1
	+
	bytec 1 //  "playerWins"
	swap
	app_global_put

*if1_end:
	// contracts/GameMaker.algo.ts:54
	// sendPayment({ receiver: owner, amount: contractMBRCost })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/GameMaker.algo.ts:54
	// receiver: owner
	frame_dig 0 // owner: address
	itxn_field Receiver

	// contracts/GameMaker.algo.ts:54
	// amount: contractMBRCost
	pushint 178500
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	bytec 3 //  method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xcc5d0409 // method "register(pay)uint64"
	pushbytes 0x1bec88bd // method "play(pay,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_register *abi_route_play

	// this contract does not implement the given ABI method for call NoOp
	err