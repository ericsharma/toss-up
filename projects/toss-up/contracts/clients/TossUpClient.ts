/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"TossUp","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"register","args":[{"name":"payment","type":"pay"},{"name":"owner","type":"address"}],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]}},{"name":"play","args":[{"name":"payment","type":"pay"},{"name":"player","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["DeleteApplication"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":1,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"owner":{"key":"b3duZXI=","keyType":"AVMBytes","valueType":"address"},"amount":{"key":"YW1vdW50","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/TossUp.algo.ts:3","pc":[0]},{"teal":2,"source":"contracts/TossUp.algo.ts:3","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/TossUp.algo.ts:3","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]},{"teal":15,"source":"contracts/TossUp.algo.ts:3","pc":[28,29]},{"teal":16,"source":"contracts/TossUp.algo.ts:3","pc":[30]},{"teal":17,"source":"contracts/TossUp.algo.ts:3","pc":[31,32]},{"teal":18,"source":"contracts/TossUp.algo.ts:3","pc":[33]},{"teal":19,"source":"contracts/TossUp.algo.ts:3","pc":[34,35]},{"teal":20,"source":"contracts/TossUp.algo.ts:3","pc":[36]},{"teal":21,"source":"contracts/TossUp.algo.ts:3","pc":[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62]},{"teal":25,"source":"contracts/TossUp.algo.ts:3","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[63]},{"teal":30,"source":"contracts/TossUp.algo.ts:10","pc":[64,65,66]},{"teal":31,"source":"contracts/TossUp.algo.ts:10","pc":[67]},{"teal":32,"source":"contracts/TossUp.algo.ts:10","pc":[68]},{"teal":36,"source":"contracts/TossUp.algo.ts:10","pc":[69,70,71]},{"teal":37,"source":"contracts/TossUp.algo.ts:10","pc":[72]},{"teal":42,"source":"contracts/TossUp.algo.ts:12","pc":[73]},{"teal":45,"source":"contracts/TossUp.algo.ts:12","pc":[74,75,76]},{"teal":46,"source":"contracts/TossUp.algo.ts:12","pc":[77]},{"teal":47,"source":"contracts/TossUp.algo.ts:12","pc":[78]},{"teal":48,"source":"contracts/TossUp.algo.ts:12","pc":[79]},{"teal":49,"source":"contracts/TossUp.algo.ts:12","pc":[80]},{"teal":52,"source":"contracts/TossUp.algo.ts:12","errorMessage":"argument 0 (owner) for register must be a address","pc":[81]},{"teal":55,"source":"contracts/TossUp.algo.ts:12","pc":[82,83]},{"teal":56,"source":"contracts/TossUp.algo.ts:12","pc":[84]},{"teal":57,"source":"contracts/TossUp.algo.ts:12","pc":[85]},{"teal":58,"source":"contracts/TossUp.algo.ts:12","pc":[86]},{"teal":59,"source":"contracts/TossUp.algo.ts:12","pc":[87,88]},{"teal":60,"source":"contracts/TossUp.algo.ts:12","pc":[89]},{"teal":61,"source":"contracts/TossUp.algo.ts:12","pc":[90]},{"teal":64,"source":"contracts/TossUp.algo.ts:12","errorMessage":"argument 1 (payment) for register must be a pay transaction","pc":[91]},{"teal":67,"source":"contracts/TossUp.algo.ts:12","pc":[92,93,94]},{"teal":68,"source":"contracts/TossUp.algo.ts:12","pc":[95]},{"teal":69,"source":"contracts/TossUp.algo.ts:12","pc":[96]},{"teal":70,"source":"contracts/TossUp.algo.ts:12","pc":[97]},{"teal":71,"source":"contracts/TossUp.algo.ts:12","pc":[98]},{"teal":75,"source":"contracts/TossUp.algo.ts:12","pc":[99,100,101]},{"teal":80,"source":"contracts/TossUp.algo.ts:13","pc":[102,103]},{"teal":81,"source":"contracts/TossUp.algo.ts:13","pc":[104,105]},{"teal":82,"source":"contracts/TossUp.algo.ts:13","pc":[106]},{"teal":83,"source":"contracts/TossUp.algo.ts:13","pc":[107]},{"teal":86,"source":"contracts/TossUp.algo.ts:13","errorMessage":"transaction verification failed: {\"txn\":\"payment\",\"field\":\"amount\",\"condition\":\"greaterThan\",\"expected\":\">0\"}","pc":[108]},{"teal":90,"source":"contracts/TossUp.algo.ts:14","pc":[109]},{"teal":91,"source":"contracts/TossUp.algo.ts:14","pc":[110,111]},{"teal":92,"source":"contracts/TossUp.algo.ts:14","pc":[112]},{"teal":96,"source":"contracts/TossUp.algo.ts:15","pc":[113]},{"teal":97,"source":"contracts/TossUp.algo.ts:15","pc":[114,115]},{"teal":98,"source":"contracts/TossUp.algo.ts:15","pc":[116,117]},{"teal":99,"source":"contracts/TossUp.algo.ts:15","pc":[118]},{"teal":103,"source":"contracts/TossUp.algo.ts:16","pc":[119]},{"teal":104,"source":"contracts/TossUp.algo.ts:16","pc":[120]},{"teal":105,"source":"contracts/TossUp.algo.ts:12","pc":[121]},{"teal":109,"source":"contracts/TossUp.algo.ts:19","pc":[122,123,124]},{"teal":112,"source":"contracts/TossUp.algo.ts:19","pc":[125]},{"teal":113,"source":"contracts/TossUp.algo.ts:19","pc":[126,127]},{"teal":117,"source":"contracts/TossUp.algo.ts:20","pc":[128,129]},{"teal":118,"source":"contracts/TossUp.algo.ts:20","pc":[130]},{"teal":119,"source":"contracts/TossUp.algo.ts:20","pc":[131]},{"teal":120,"source":"contracts/TossUp.algo.ts:20","pc":[132,133]},{"teal":121,"source":"contracts/TossUp.algo.ts:20","pc":[134,135]},{"teal":125,"source":"contracts/TossUp.algo.ts:21","pc":[136,137]},{"teal":126,"source":"contracts/TossUp.algo.ts:21","pc":[138]},{"teal":127,"source":"contracts/TossUp.algo.ts:21","pc":[139]},{"teal":128,"source":"contracts/TossUp.algo.ts:21","pc":[140,141]},{"teal":129,"source":"contracts/TossUp.algo.ts:21","pc":[142,143]},{"teal":133,"source":"contracts/TossUp.algo.ts:23","pc":[144,145]},{"teal":134,"source":"contracts/TossUp.algo.ts:23","pc":[146,147]},{"teal":135,"source":"contracts/TossUp.algo.ts:23","pc":[148]},{"teal":136,"source":"contracts/TossUp.algo.ts:23","pc":[149]},{"teal":137,"source":"contracts/TossUp.algo.ts:23","pc":[150]},{"teal":138,"source":"contracts/TossUp.algo.ts:23","pc":[151]},{"teal":139,"source":"contracts/TossUp.algo.ts:23","pc":[152,153]},{"teal":143,"source":"contracts/TossUp.algo.ts:27","pc":[154,155]},{"teal":146,"source":"contracts/TossUp.algo.ts:19","pc":[156,157]},{"teal":149,"source":"contracts/TossUp.algo.ts:19","pc":[158,159]},{"teal":150,"source":"contracts/TossUp.algo.ts:19","pc":[160]},{"teal":155,"source":"contracts/TossUp.algo.ts:30","pc":[161]},{"teal":158,"source":"contracts/TossUp.algo.ts:31","pc":[162,163,164]},{"teal":159,"source":"contracts/TossUp.algo.ts:31","pc":[165]},{"teal":160,"source":"contracts/TossUp.algo.ts:31","pc":[166]},{"teal":161,"source":"contracts/TossUp.algo.ts:31","pc":[167]},{"teal":162,"source":"contracts/TossUp.algo.ts:31","pc":[168]},{"teal":165,"source":"contracts/TossUp.algo.ts:31","errorMessage":"argument 0 (player) for play must be a address","pc":[169]},{"teal":168,"source":"contracts/TossUp.algo.ts:31","pc":[170,171]},{"teal":169,"source":"contracts/TossUp.algo.ts:31","pc":[172]},{"teal":170,"source":"contracts/TossUp.algo.ts:31","pc":[173]},{"teal":171,"source":"contracts/TossUp.algo.ts:31","pc":[174]},{"teal":172,"source":"contracts/TossUp.algo.ts:31","pc":[175,176]},{"teal":173,"source":"contracts/TossUp.algo.ts:31","pc":[177]},{"teal":174,"source":"contracts/TossUp.algo.ts:31","pc":[178]},{"teal":177,"source":"contracts/TossUp.algo.ts:31","errorMessage":"argument 1 (payment) for play must be a pay transaction","pc":[179]},{"teal":180,"source":"contracts/TossUp.algo.ts:30","pc":[180,181,182]},{"teal":181,"source":"contracts/TossUp.algo.ts:30","pc":[183]},{"teal":182,"source":"contracts/TossUp.algo.ts:30","pc":[184]},{"teal":183,"source":"contracts/TossUp.algo.ts:30","pc":[185]},{"teal":184,"source":"contracts/TossUp.algo.ts:30","pc":[186]},{"teal":185,"source":"contracts/TossUp.algo.ts:30","pc":[187]},{"teal":189,"source":"contracts/TossUp.algo.ts:30","pc":[188,189,190]},{"teal":192,"source":"contracts/TossUp.algo.ts:30","pc":[191]},{"teal":196,"source":"contracts/TossUp.algo.ts:32","pc":[192,193]},{"teal":197,"source":"contracts/TossUp.algo.ts:32","pc":[194]},{"teal":198,"source":"contracts/TossUp.algo.ts:32","pc":[195]},{"teal":199,"source":"contracts/TossUp.algo.ts:32","pc":[196]},{"teal":202,"source":"contracts/TossUp.algo.ts:32","errorMessage":"asserts failed: asserts(player !== this.owner.value, this.amount.value === payment.amount, this.txn.sender === this.app.creator)","pc":[197]},{"teal":203,"source":"contracts/TossUp.algo.ts:32","pc":[198]},{"teal":204,"source":"contracts/TossUp.algo.ts:32","pc":[199]},{"teal":205,"source":"contracts/TossUp.algo.ts:32","pc":[200,201]},{"teal":206,"source":"contracts/TossUp.algo.ts:32","pc":[202,203]},{"teal":207,"source":"contracts/TossUp.algo.ts:32","pc":[204]},{"teal":210,"source":"contracts/TossUp.algo.ts:32","errorMessage":"asserts failed: asserts(player !== this.owner.value, this.amount.value === payment.amount, this.txn.sender === this.app.creator)","pc":[205]},{"teal":211,"source":"contracts/TossUp.algo.ts:32","pc":[206,207]},{"teal":212,"source":"contracts/TossUp.algo.ts:32","pc":[208,209,210]},{"teal":213,"source":"contracts/TossUp.algo.ts:32","pc":[211,212]},{"teal":214,"source":"contracts/TossUp.algo.ts:32","pc":[213]},{"teal":215,"source":"contracts/TossUp.algo.ts:32","pc":[214]},{"teal":218,"source":"contracts/TossUp.algo.ts:32","errorMessage":"asserts failed: asserts(player !== this.owner.value, this.amount.value === payment.amount, this.txn.sender === this.app.creator)","pc":[215]},{"teal":222,"source":"contracts/TossUp.algo.ts:34","pc":[216,217,218]},{"teal":223,"source":"contracts/TossUp.algo.ts:34","pc":[219,220]},{"teal":228,"source":"contracts/TossUp.algo.ts:36","pc":[221,222]},{"teal":229,"source":"contracts/TossUp.algo.ts:36","pc":[223]},{"teal":230,"source":"contracts/TossUp.algo.ts:36","pc":[224]},{"teal":231,"source":"contracts/TossUp.algo.ts:36","pc":[225]},{"teal":232,"source":"contracts/TossUp.algo.ts:36","pc":[226]},{"teal":233,"source":"contracts/TossUp.algo.ts:36","pc":[227,228,229]},{"teal":238,"source":"contracts/TossUp.algo.ts:37","pc":[230]},{"teal":239,"source":"contracts/TossUp.algo.ts:37","pc":[231]},{"teal":240,"source":"contracts/TossUp.algo.ts:37","pc":[232,233]},{"teal":244,"source":"contracts/TossUp.algo.ts:37","pc":[234]},{"teal":245,"source":"contracts/TossUp.algo.ts:37","pc":[235]},{"teal":246,"source":"contracts/TossUp.algo.ts:37","pc":[236,237]},{"teal":250,"source":"contracts/TossUp.algo.ts:37","pc":[238]},{"teal":251,"source":"contracts/TossUp.algo.ts:37","pc":[239]},{"teal":252,"source":"contracts/TossUp.algo.ts:37","pc":[240,241]},{"teal":253,"source":"contracts/TossUp.algo.ts:37","pc":[242,243]},{"teal":254,"source":"contracts/TossUp.algo.ts:37","pc":[244]},{"teal":255,"source":"contracts/TossUp.algo.ts:37","pc":[245,246]},{"teal":258,"source":"contracts/TossUp.algo.ts:37","pc":[247]},{"teal":259,"source":"contracts/TossUp.algo.ts:37","pc":[248,249]},{"teal":262,"source":"contracts/TossUp.algo.ts:37","pc":[250]},{"teal":263,"source":"contracts/TossUp.algo.ts:36","pc":[251,252,253]},{"teal":268,"source":"contracts/TossUp.algo.ts:39","pc":[254]},{"teal":269,"source":"contracts/TossUp.algo.ts:39","pc":[255]},{"teal":270,"source":"contracts/TossUp.algo.ts:39","pc":[256,257]},{"teal":274,"source":"contracts/TossUp.algo.ts:39","pc":[258,259]},{"teal":275,"source":"contracts/TossUp.algo.ts:39","pc":[260,261]},{"teal":279,"source":"contracts/TossUp.algo.ts:39","pc":[262]},{"teal":280,"source":"contracts/TossUp.algo.ts:39","pc":[263]},{"teal":281,"source":"contracts/TossUp.algo.ts:39","pc":[264,265]},{"teal":282,"source":"contracts/TossUp.algo.ts:39","pc":[266,267]},{"teal":283,"source":"contracts/TossUp.algo.ts:39","pc":[268]},{"teal":284,"source":"contracts/TossUp.algo.ts:39","pc":[269,270]},{"teal":287,"source":"contracts/TossUp.algo.ts:39","pc":[271]},{"teal":288,"source":"contracts/TossUp.algo.ts:39","pc":[272,273]},{"teal":291,"source":"contracts/TossUp.algo.ts:39","pc":[274]},{"teal":296,"source":"contracts/TossUp.algo.ts:42","pc":[275]},{"teal":297,"source":"contracts/TossUp.algo.ts:42","pc":[276]},{"teal":298,"source":"contracts/TossUp.algo.ts:42","pc":[277,278]},{"teal":302,"source":"contracts/TossUp.algo.ts:42","pc":[279]},{"teal":303,"source":"contracts/TossUp.algo.ts:42","pc":[280]},{"teal":304,"source":"contracts/TossUp.algo.ts:42","pc":[281,282]},{"teal":307,"source":"contracts/TossUp.algo.ts:42","pc":[283]},{"teal":308,"source":"contracts/TossUp.algo.ts:42","pc":[284,285]},{"teal":311,"source":"contracts/TossUp.algo.ts:42","pc":[286]},{"teal":315,"source":"contracts/TossUp.algo.ts:43","pc":[287,288]},{"teal":316,"source":"contracts/TossUp.algo.ts:43","pc":[289]},{"teal":317,"source":"contracts/TossUp.algo.ts:43","pc":[290]},{"teal":320,"source":"contracts/TossUp.algo.ts:30","pc":[291,292]},{"teal":321,"source":"contracts/TossUp.algo.ts:30","pc":[293]},{"teal":324,"source":"contracts/TossUp.algo.ts:3","pc":[294,295,296,297,298,299]},{"teal":325,"source":"contracts/TossUp.algo.ts:3","pc":[300,301,302]},{"teal":326,"source":"contracts/TossUp.algo.ts:3","pc":[303,304,305,306]},{"teal":329,"source":"contracts/TossUp.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[307]},{"teal":332,"source":"contracts/TossUp.algo.ts:3","pc":[308,309,310,311,312,313]},{"teal":333,"source":"contracts/TossUp.algo.ts:3","pc":[314,315,316]},{"teal":334,"source":"contracts/TossUp.algo.ts:3","pc":[317,318,319,320]},{"teal":337,"source":"contracts/TossUp.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[321]},{"teal":340,"source":"contracts/TossUp.algo.ts:3","pc":[322,323,324,325,326,327]},{"teal":341,"source":"contracts/TossUp.algo.ts:3","pc":[328,329,330]},{"teal":342,"source":"contracts/TossUp.algo.ts:3","pc":[331,332,333,334]},{"teal":345,"source":"contracts/TossUp.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[335]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDExCmludGNibG9jayAxIDAgMiAzMgpieXRlY2Jsb2NrIDB4NmY3NzZlNjU3MiAweDYxNmQ2Zjc1NmU3NCAweCAweDE1MWY3Yzc1CgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4yCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY2FsbF9EZWxldGVBcHBsaWNhdGlvbiAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbigpOiB2b2lkCmNyZWF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCglyZXRzdWIKCi8vIHJlZ2lzdGVyKHBheSxhZGRyZXNzKWFkZHJlc3MKKmFiaV9yb3V0ZV9yZWdpc3RlcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMyAvLyAweDE1MWY3Yzc1CgoJLy8gb3duZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDMgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAob3duZXIpIGZvciByZWdpc3RlciBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gcGF5bWVudDogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDEgKHBheW1lbnQpIGZvciByZWdpc3RlciBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIHJlZ2lzdGVyKHBheSxhZGRyZXNzKWFkZHJlc3MKCWNhbGxzdWIgcmVnaXN0ZXIKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyByZWdpc3RlcihwYXltZW50OiBQYXlUeG4sIG93bmVyOiBBZGRyZXNzKTogQWRkcmVzcwpyZWdpc3RlcjoKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0cy9Ub3NzVXAuYWxnby50czoxMwoJLy8gdmVyaWZ5UGF5VHhuKHBheW1lbnQsIHsgYW1vdW50OiB7IGdyZWF0ZXJUaGFuOiAwIH0gfSkKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBwYXltZW50OiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaW50YyAxIC8vIDAKCT4KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InBheW1lbnQiLCJmaWVsZCI6ImFtb3VudCIsImNvbmRpdGlvbiI6ImdyZWF0ZXJUaGFuIiwiZXhwZWN0ZWQiOiI+MCJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG9zc1VwLmFsZ28udHM6MTQKCS8vIHRoaXMub3duZXIudmFsdWUgPSBvd25lcgoJYnl0ZWMgMCAvLyAgIm93bmVyIgoJZnJhbWVfZGlnIC0yIC8vIG93bmVyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Ub3NzVXAuYWxnby50czoxNQoJLy8gdGhpcy5hbW91bnQudmFsdWUgPSBwYXltZW50LmFtb3VudAoJYnl0ZWMgMSAvLyAgImFtb3VudCIKCWZyYW1lX2RpZyAtMSAvLyBwYXltZW50OiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvVG9zc1VwLmFsZ28udHM6MTYKCS8vIHJldHVybiB0aGlzLm93bmVyLnZhbHVlOwoJYnl0ZWMgMCAvLyAgIm93bmVyIgoJYXBwX2dsb2JhbF9nZXQKCXJldHN1YgoKLy8gZ2V0UmFuZG9tKCk6IHVpbnQ2NApnZXRSYW5kb206Cglwcm90byAwIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMiAvLyAweAoJZHVwbiAyCgoJLy8gY29udHJhY3RzL1Rvc3NVcC5hbGdvLnRzOjIwCgkvLyBwcm9wb3NlciA9IGJsb2Nrc1t0aGlzLnR4bi5maXJzdFZhbGlkIC0gMV0ucHJvcG9zZXIKCXR4biBGaXJzdFZhbGlkCglpbnRjIDAgLy8gMQoJLQoJYmxvY2sgQmxrUHJvcG9zZXIKCWZyYW1lX2J1cnkgMCAvLyBwcm9wb3NlcjogYWRkcmVzcwoKCS8vIGNvbnRyYWN0cy9Ub3NzVXAuYWxnby50czoyMQoJLy8gYmxvY2tTZWVkID0gYmxvY2tzW3RoaXMudHhuLmZpcnN0VmFsaWQgLSAxXS5zZWVkCgl0eG4gRmlyc3RWYWxpZAoJaW50YyAwIC8vIDEKCS0KCWJsb2NrIEJsa1NlZWQKCWZyYW1lX2J1cnkgMSAvLyBibG9ja1NlZWQ6IGJ5dGVbXQoKCS8vIGNvbnRyYWN0cy9Ub3NzVXAuYWxnby50czoyMwoJLy8gc2VlZCA9IGdldGJ5dGUoc2hhMjU2KGNvbmNhdChwcm9wb3NlciwgYmxvY2tTZWVkKSksIDApCglmcmFtZV9kaWcgMCAvLyBwcm9wb3NlcjogYWRkcmVzcwoJZnJhbWVfZGlnIDEgLy8gYmxvY2tTZWVkOiBieXRlW10KCWNvbmNhdAoJc2hhMjU2CglpbnRjIDEgLy8gMAoJZ2V0Ynl0ZQoJZnJhbWVfYnVyeSAyIC8vIHNlZWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9Ub3NzVXAuYWxnby50czoyNwoJLy8gcmV0dXJuIHNlZWQ7CglmcmFtZV9kaWcgMiAvLyBzZWVkOiB1aW50NjQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCi8vIHBsYXkocGF5LGFkZHJlc3MpdWludDY0CiphYmlfcm91dGVfcGxheToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMyAvLyAweDE1MWY3Yzc1CgoJLy8gcGxheWVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAzIC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKHBsYXllcikgZm9yIHBsYXkgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIHBheW1lbnQ6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludGMgMCAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDAgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCAxIChwYXltZW50KSBmb3IgcGxheSBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIHBsYXkocGF5LGFkZHJlc3MpdWludDY0CgljYWxsc3ViIHBsYXkKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBwbGF5KHBheW1lbnQ6IFBheVR4biwgcGxheWVyOiBBZGRyZXNzKTogdWludDY0CnBsYXk6Cglwcm90byAyIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMiAvLyAweAoKCS8vIGNvbnRyYWN0cy9Ub3NzVXAuYWxnby50czozMgoJLy8gYXNzZXJ0cyhwbGF5ZXIgIT09IHRoaXMub3duZXIudmFsdWUsIHRoaXMuYW1vdW50LnZhbHVlID09PSBwYXltZW50LmFtb3VudCwgdGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFwcC5jcmVhdG9yKQoJZnJhbWVfZGlnIC0yIC8vIHBsYXllcjogQWRkcmVzcwoJYnl0ZWMgMCAvLyAgIm93bmVyIgoJYXBwX2dsb2JhbF9nZXQKCSE9CgoJLy8gYXNzZXJ0cyBmYWlsZWQ6IGFzc2VydHMocGxheWVyICE9PSB0aGlzLm93bmVyLnZhbHVlLCB0aGlzLmFtb3VudC52YWx1ZSA9PT0gcGF5bWVudC5hbW91bnQsIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hcHAuY3JlYXRvcikKCWFzc2VydAoJYnl0ZWMgMSAvLyAgImFtb3VudCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gcGF5bWVudDogUGF5VHhuCglndHhucyBBbW91bnQKCT09CgoJLy8gYXNzZXJ0cyBmYWlsZWQ6IGFzc2VydHMocGxheWVyICE9PSB0aGlzLm93bmVyLnZhbHVlLCB0aGlzLmFtb3VudC52YWx1ZSA9PT0gcGF5bWVudC5hbW91bnQsIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hcHAuY3JlYXRvcikKCWFzc2VydAoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoKCS8vIGFzc2VydHMgZmFpbGVkOiBhc3NlcnRzKHBsYXllciAhPT0gdGhpcy5vd25lci52YWx1ZSwgdGhpcy5hbW91bnQudmFsdWUgPT09IHBheW1lbnQuYW1vdW50LCB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYXBwLmNyZWF0b3IpCglhc3NlcnQKCgkvLyBjb250cmFjdHMvVG9zc1VwLmFsZ28udHM6MzQKCS8vIHNlZWQgPSB0aGlzLmdldFJhbmRvbSgpCgljYWxsc3ViIGdldFJhbmRvbQoJZnJhbWVfYnVyeSAwIC8vIHNlZWQ6IHVpbnQ2NAoKCS8vICppZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvVG9zc1VwLmFsZ28udHM6MzYKCS8vIHNlZWQgJSAyID09PSAwCglmcmFtZV9kaWcgMCAvLyBzZWVkOiB1aW50NjQKCWludGMgMiAvLyAyCgklCglpbnRjIDEgLy8gMAoJPT0KCWJ6ICppZjBfZWxzZQoKCS8vICppZjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL1Rvc3NVcC5hbGdvLnRzOjM3CgkvLyBzZW5kUGF5bWVudCh7IHJlY2VpdmVyOiB0aGlzLm93bmVyLnZhbHVlLCBhbW91bnQ6IHRoaXMuYW1vdW50LnZhbHVlICsgcGF5bWVudC5hbW91bnQgfSkKCWl0eG5fYmVnaW4KCWludGMgMCAvLyAgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL1Rvc3NVcC5hbGdvLnRzOjM3CgkvLyByZWNlaXZlcjogdGhpcy5vd25lci52YWx1ZQoJYnl0ZWMgMCAvLyAgIm93bmVyIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvVG9zc1VwLmFsZ28udHM6MzcKCS8vIGFtb3VudDogdGhpcy5hbW91bnQudmFsdWUgKyBwYXltZW50LmFtb3VudAoJYnl0ZWMgMSAvLyAgImFtb3VudCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gcGF5bWVudDogUGF5VHhuCglndHhucyBBbW91bnQKCSsKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJYiAqaWYwX2VuZAoKKmlmMF9lbHNlOgoJLy8gY29udHJhY3RzL1Rvc3NVcC5hbGdvLnRzOjM5CgkvLyBzZW5kUGF5bWVudCh7IHJlY2VpdmVyOiBwbGF5ZXIsIGFtb3VudDogdGhpcy5hbW91bnQudmFsdWUgKyBwYXltZW50LmFtb3VudCB9KQoJaXR4bl9iZWdpbgoJaW50YyAwIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvVG9zc1VwLmFsZ28udHM6MzkKCS8vIHJlY2VpdmVyOiBwbGF5ZXIKCWZyYW1lX2RpZyAtMiAvLyBwbGF5ZXI6IEFkZHJlc3MKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvVG9zc1VwLmFsZ28udHM6MzkKCS8vIGFtb3VudDogdGhpcy5hbW91bnQudmFsdWUgKyBwYXltZW50LmFtb3VudAoJYnl0ZWMgMSAvLyAgImFtb3VudCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gcGF5bWVudDogUGF5VHhuCglndHhucyBBbW91bnQKCSsKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKKmlmMF9lbmQ6CgkvLyBjb250cmFjdHMvVG9zc1VwLmFsZ28udHM6NDIKCS8vIHNlbmRQYXltZW50KHsgY2xvc2VSZW1haW5kZXJUbzogdGhpcy5vd25lci52YWx1ZSB9KQoJaXR4bl9iZWdpbgoJaW50YyAwIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvVG9zc1VwLmFsZ28udHM6NDIKCS8vIGNsb3NlUmVtYWluZGVyVG86IHRoaXMub3duZXIudmFsdWUKCWJ5dGVjIDAgLy8gICJvd25lciIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzL1Rvc3NVcC5hbGdvLnRzOjQzCgkvLyByZXR1cm4gc2VlZCAlIDI7CglmcmFtZV9kaWcgMCAvLyBzZWVkOiB1aW50NjQKCWludGMgMiAvLyAyCgklCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHhlNmQ2ZDllNiAvLyBtZXRob2QgInJlZ2lzdGVyKHBheSxhZGRyZXNzKWFkZHJlc3MiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX3JlZ2lzdGVyCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJyCgoqY2FsbF9EZWxldGVBcHBsaWNhdGlvbjoKCXB1c2hieXRlcyAweDE1NWNlZmZhIC8vIG1ldGhvZCAicGxheShwYXksYWRkcmVzcyl1aW50NjQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX3BsYXkKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBEZWxldGVBcHBsaWNhdGlvbgoJZXJy","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"byteCode":{"approval":"CyAEAQACICYEBW93bmVyBmFtb3VudAAEFR98dTEYFIEGCzEZCI0MAPUAAAAAAAAAAAEDAOcAAAAAAAAAAAAAAIgAAiJDigAAiSs2GgFJFSUSRDEWIglJOBAiEkSIAARQsCJDigIBi/84CCMNRCiL/mcpi/84CGcoZImKAAEqRwIxAiIJ0QKMADECIgnRAIwBiwCLAVABI1WMAosCjABGAokrNhoBSRUlEkQxFiIJSTgQIhJEiAAFFlCwIkOKAgEqi/4oZBNEKWSL/zgIEkQxADYyAHIHSBJEiP+fjACLACQYIxJBABixIrIQKGSyBylki/84CAiyCCOyAbNCABWxIrIQi/6yBylki/84CAiyCCOyAbOxIrIQKGSyCSOyAbOLACQYjACJgAS4RHs2NhoAjgH/DQCABObW2eY2GgCOAf8IAIAEFVzv+jYaAI4B/1IA","clear":"Cw=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TossUp contract
 */
export type TossUpArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'register(pay,address)address': {
      payment: AppMethodCallTransactionArgument
      owner: string
    }
    'play(pay,address)uint64': {
      payment: AppMethodCallTransactionArgument
      player: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'register(pay,address)address': [payment: AppMethodCallTransactionArgument, owner: string]
    'play(pay,address)uint64': [payment: AppMethodCallTransactionArgument, player: string]
  }
}

/**
 * The return type for each method
 */
export type TossUpReturns = {
  'createApplication()void': void
  'register(pay,address)address': string
  'play(pay,address)uint64': bigint
}

/**
 * Defines the types of available calls and state of the TossUp smart contract.
 */
export type TossUpTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: TossUpArgs['obj']['createApplication()void']
      argsTuple: TossUpArgs['tuple']['createApplication()void']
      returns: TossUpReturns['createApplication()void']
    }>
    & Record<'register(pay,address)address' | 'register', {
      argsObj: TossUpArgs['obj']['register(pay,address)address']
      argsTuple: TossUpArgs['tuple']['register(pay,address)address']
      returns: TossUpReturns['register(pay,address)address']
    }>
    & Record<'play(pay,address)uint64' | 'play', {
      argsObj: TossUpArgs['obj']['play(pay,address)uint64']
      argsTuple: TossUpArgs['tuple']['play(pay,address)uint64']
      returns: TossUpReturns['play(pay,address)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        owner: string
        amount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TossUpSignatures = keyof TossUpTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TossUpNonVoidMethodSignatures = keyof TossUpTypes['methods'] extends infer T ? T extends keyof TossUpTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TossUp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TossUpSignatures> = TossUpTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TossUp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TossUpSignatures> = TossUpTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TossUpTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TossUpCreateCallParams =
  | Expand<CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type TossUpDeleteCallParams =
  | Expand<CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']> & {method: 'play'}>
  | Expand<CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']> & {method: 'play(pay,address)uint64'}>
/**
 * Defines arguments required for the deploy method.
 */
export type TossUpDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TossUpCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: TossUpDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TossUp smart contract
 */
export abstract class TossUpParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TossUpCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return TossUpParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the TossUp smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends TossUpDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'play':
          case 'play(pay,address)uint64':
            return TossUpParamsFactory.delete.play(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the TossUp smart contract using the play(pay,address)uint64 ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      play(params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'play(pay,address)uint64' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.player],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the register(pay,address)address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static register(params: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'register(pay,address)address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.owner],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TossUp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TossUpFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TossUpFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TossUpClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TossUpClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TossUp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TossUpDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TossUpParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TossUpCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? TossUpParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (TossUpDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TossUpClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TossUp smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(TossUpParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the TossUp smart contract using the play(pay,address)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      play: (params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>) => {
        return this.appFactory.params.deployDelete(TossUpParamsFactory.delete.play(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TossUp smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(TossUpParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TossUp smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(TossUpParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TossUpReturns['createApplication()void']) }, appClient: new TossUpClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TossUp smart contract
 */
export class TossUpClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TossUpClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TossUp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TossUpClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TossUpNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TossUpClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TossUpClient> {
    return new TossUpClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TossUpClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TossUpClient> {
    return new TossUpClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TossUp smart contract using the `play(pay,address)uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      play: (params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>) => {
        return this.appClient.params.delete(TossUpParamsFactory.delete.play(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the TossUp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TossUp smart contract using the `register(pay,address)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    register: (params: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TossUpParamsFactory.register(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TossUp smart contract using the `play(pay,address)uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      play: (params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>) => {
        return this.appClient.createTransaction.delete(TossUpParamsFactory.delete.play(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the TossUp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TossUp smart contract using the `register(pay,address)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    register: (params: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TossUpParamsFactory.register(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TossUp smart contract using the `play(pay,address)uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      play: async (params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']> & SendParams) => {
        const result = await this.appClient.send.delete(TossUpParamsFactory.delete.play(params))
        return {...result, return: result.return as unknown as (undefined | TossUpReturns['play(pay,address)uint64'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the TossUp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TossUp smart contract using the `register(pay,address)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    register: async (params: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TossUpParamsFactory.register(params))
      return {...result, return: result.return as unknown as (undefined | TossUpReturns['register(pay,address)address'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TossUpClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TossUp app
   */
  state = {
    /**
     * Methods to access global state for the current TossUp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          owner: result.owner,
          amount: result.amount,
        }
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the amount key in global state
       */
      amount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("amount")) as bigint | undefined },
    },
  }

  public newGroup(): TossUpComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a register(pay,address)address method call against the TossUp contract
       */
      register(params: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.register(params)))
        resultMappers.push((v) => client.decodeReturnValue('register(pay,address)address', v))
        return this
      },
      get delete() {
        return {
          play: (params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.play(params)))
            resultMappers.push((v) => client.decodeReturnValue('play(pay,address)uint64', v))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the TossUp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TossUpComposer
  }
}
export type TossUpComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the register(pay,address)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(params?: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']>): TossUpComposer<[...TReturns, TossUpReturns['register(pay,address)address'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the TossUp smart contract using the play(pay,address)uint64 ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    play(params?: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>): TossUpComposer<[...TReturns, TossUpReturns['play(pay,address)uint64'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the TossUp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TossUpComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TossUpComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TossUpComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TossUpComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TossUpComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TossUpComposerResults<TReturns>>
}
export type TossUpComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

