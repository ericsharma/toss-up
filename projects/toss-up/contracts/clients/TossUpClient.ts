/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"TossUp","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"register","args":[{"name":"payment","type":"pay"},{"name":"owner","type":"address"}],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]}},{"name":"play","args":[{"name":"payment","type":"pay"},{"name":"player","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["DeleteApplication"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":1,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"owner":{"key":"b3duZXI=","keyType":"AVMBytes","valueType":"address"},"amount":{"key":"YW1vdW50","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/TossUp.algo.ts:3","pc":[0]},{"teal":2,"source":"contracts/TossUp.algo.ts:3","pc":[1,2,3,4,5,6,7,8,9,10,11,12]},{"teal":3,"source":"contracts/TossUp.algo.ts:3","pc":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]},{"teal":15,"source":"contracts/TossUp.algo.ts:3","pc":[34,35]},{"teal":16,"source":"contracts/TossUp.algo.ts:3","pc":[36]},{"teal":17,"source":"contracts/TossUp.algo.ts:3","pc":[37,38]},{"teal":18,"source":"contracts/TossUp.algo.ts:3","pc":[39]},{"teal":19,"source":"contracts/TossUp.algo.ts:3","pc":[40,41]},{"teal":20,"source":"contracts/TossUp.algo.ts:3","pc":[42]},{"teal":21,"source":"contracts/TossUp.algo.ts:3","pc":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68]},{"teal":25,"source":"contracts/TossUp.algo.ts:3","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[69]},{"teal":30,"source":"contracts/TossUp.algo.ts:10","pc":[70,71,72]},{"teal":31,"source":"contracts/TossUp.algo.ts:10","pc":[73]},{"teal":32,"source":"contracts/TossUp.algo.ts:10","pc":[74]},{"teal":36,"source":"contracts/TossUp.algo.ts:10","pc":[75,76,77]},{"teal":37,"source":"contracts/TossUp.algo.ts:10","pc":[78]},{"teal":42,"source":"contracts/TossUp.algo.ts:12","pc":[79]},{"teal":45,"source":"contracts/TossUp.algo.ts:12","pc":[80,81,82]},{"teal":46,"source":"contracts/TossUp.algo.ts:12","pc":[83]},{"teal":47,"source":"contracts/TossUp.algo.ts:12","pc":[84]},{"teal":48,"source":"contracts/TossUp.algo.ts:12","pc":[85,86]},{"teal":49,"source":"contracts/TossUp.algo.ts:12","pc":[87]},{"teal":52,"source":"contracts/TossUp.algo.ts:12","errorMessage":"argument 0 (owner) for register must be a address","pc":[88]},{"teal":55,"source":"contracts/TossUp.algo.ts:12","pc":[89,90]},{"teal":56,"source":"contracts/TossUp.algo.ts:12","pc":[91]},{"teal":57,"source":"contracts/TossUp.algo.ts:12","pc":[92]},{"teal":58,"source":"contracts/TossUp.algo.ts:12","pc":[93]},{"teal":59,"source":"contracts/TossUp.algo.ts:12","pc":[94,95]},{"teal":60,"source":"contracts/TossUp.algo.ts:12","pc":[96]},{"teal":61,"source":"contracts/TossUp.algo.ts:12","pc":[97]},{"teal":64,"source":"contracts/TossUp.algo.ts:12","errorMessage":"argument 1 (payment) for register must be a pay transaction","pc":[98]},{"teal":67,"source":"contracts/TossUp.algo.ts:12","pc":[99,100,101]},{"teal":68,"source":"contracts/TossUp.algo.ts:12","pc":[102]},{"teal":69,"source":"contracts/TossUp.algo.ts:12","pc":[103]},{"teal":70,"source":"contracts/TossUp.algo.ts:12","pc":[104]},{"teal":71,"source":"contracts/TossUp.algo.ts:12","pc":[105]},{"teal":75,"source":"contracts/TossUp.algo.ts:12","pc":[106,107,108]},{"teal":80,"source":"contracts/TossUp.algo.ts:13","pc":[109,110]},{"teal":81,"source":"contracts/TossUp.algo.ts:13","pc":[111,112]},{"teal":82,"source":"contracts/TossUp.algo.ts:13","pc":[113]},{"teal":83,"source":"contracts/TossUp.algo.ts:13","pc":[114]},{"teal":86,"source":"contracts/TossUp.algo.ts:13","errorMessage":"transaction verification failed: {\"txn\":\"payment\",\"field\":\"amount\",\"condition\":\"greaterThan\",\"expected\":\">0\"}","pc":[115]},{"teal":90,"source":"contracts/TossUp.algo.ts:14","pc":[116]},{"teal":91,"source":"contracts/TossUp.algo.ts:14","pc":[117,118]},{"teal":92,"source":"contracts/TossUp.algo.ts:14","pc":[119]},{"teal":96,"source":"contracts/TossUp.algo.ts:15","pc":[120]},{"teal":97,"source":"contracts/TossUp.algo.ts:15","pc":[121,122]},{"teal":98,"source":"contracts/TossUp.algo.ts:15","pc":[123,124]},{"teal":99,"source":"contracts/TossUp.algo.ts:15","pc":[125]},{"teal":103,"source":"contracts/TossUp.algo.ts:16","pc":[126]},{"teal":104,"source":"contracts/TossUp.algo.ts:16","pc":[127]},{"teal":105,"source":"contracts/TossUp.algo.ts:12","pc":[128]},{"teal":109,"source":"contracts/TossUp.algo.ts:19","pc":[129,130,131]},{"teal":112,"source":"contracts/TossUp.algo.ts:19","pc":[132]},{"teal":113,"source":"contracts/TossUp.algo.ts:19","pc":[133,134]},{"teal":118,"source":"contracts/TossUp.algo.ts:23","pc":[135,136]},{"teal":119,"source":"contracts/TossUp.algo.ts:23","pc":[137]},{"teal":120,"source":"contracts/TossUp.algo.ts:23","pc":[138]},{"teal":121,"source":"contracts/TossUp.algo.ts:23","pc":[139,140]},{"teal":122,"source":"contracts/TossUp.algo.ts:23","pc":[141,142]},{"teal":123,"source":"contracts/TossUp.algo.ts:23","pc":[143]},{"teal":124,"source":"contracts/TossUp.algo.ts:23","pc":[144]},{"teal":125,"source":"contracts/TossUp.algo.ts:23","pc":[145,146]},{"teal":126,"source":"contracts/TossUp.algo.ts:23","pc":[147]},{"teal":127,"source":"contracts/TossUp.algo.ts:23","pc":[148]},{"teal":128,"source":"contracts/TossUp.algo.ts:23","pc":[149]},{"teal":129,"source":"contracts/TossUp.algo.ts:23","pc":[150]},{"teal":130,"source":"contracts/TossUp.algo.ts:23","pc":[151]},{"teal":131,"source":"contracts/TossUp.algo.ts:22","pc":[152,153]},{"teal":135,"source":"contracts/TossUp.algo.ts:25","pc":[154,155]},{"teal":136,"source":"contracts/TossUp.algo.ts:25","pc":[156]},{"teal":137,"source":"contracts/TossUp.algo.ts:25","pc":[157]},{"teal":138,"source":"contracts/TossUp.algo.ts:25","pc":[158,159]},{"teal":139,"source":"contracts/TossUp.algo.ts:25","pc":[160,161]},{"teal":143,"source":"contracts/TossUp.algo.ts:33","pc":[162,163]},{"teal":144,"source":"contracts/TossUp.algo.ts:33","pc":[164,165]},{"teal":145,"source":"contracts/TossUp.algo.ts:33","pc":[166]},{"teal":146,"source":"contracts/TossUp.algo.ts:33","pc":[167]},{"teal":147,"source":"contracts/TossUp.algo.ts:33","pc":[168]},{"teal":148,"source":"contracts/TossUp.algo.ts:33","pc":[169,170]},{"teal":152,"source":"contracts/TossUp.algo.ts:35","pc":[171]},{"teal":153,"source":"contracts/TossUp.algo.ts:35","pc":[172]},{"teal":154,"source":"contracts/TossUp.algo.ts:35","pc":[173,174]},{"teal":155,"source":"contracts/TossUp.algo.ts:35","pc":[175]},{"teal":156,"source":"contracts/TossUp.algo.ts:35","pc":[176]},{"teal":157,"source":"contracts/TossUp.algo.ts:35","pc":[177]},{"teal":158,"source":"contracts/TossUp.algo.ts:35","pc":[178,179]},{"teal":162,"source":"contracts/TossUp.algo.ts:37","pc":[180,181]},{"teal":163,"source":"contracts/TossUp.algo.ts:37","pc":[182,183]},{"teal":164,"source":"contracts/TossUp.algo.ts:37","pc":[184]},{"teal":165,"source":"contracts/TossUp.algo.ts:37","pc":[185]},{"teal":166,"source":"contracts/TossUp.algo.ts:37","pc":[186]},{"teal":167,"source":"contracts/TossUp.algo.ts:37","pc":[187,188]},{"teal":172,"source":"contracts/TossUp.algo.ts:39","pc":[189,190]},{"teal":173,"source":"contracts/TossUp.algo.ts:39","pc":[191,192]},{"teal":174,"source":"contracts/TossUp.algo.ts:39","pc":[193]},{"teal":175,"source":"contracts/TossUp.algo.ts:39","pc":[194,195,196]},{"teal":180,"source":"contracts/TossUp.algo.ts:41","pc":[197,198]},{"teal":181,"source":"contracts/TossUp.algo.ts:41","pc":[199,200]},{"teal":182,"source":"contracts/TossUp.algo.ts:41","pc":[201]},{"teal":183,"source":"contracts/TossUp.algo.ts:41","pc":[202,203]},{"teal":184,"source":"contracts/TossUp.algo.ts:39","pc":[204,205,206]},{"teal":189,"source":"contracts/TossUp.algo.ts:43","pc":[207,208]},{"teal":190,"source":"contracts/TossUp.algo.ts:43","pc":[209,210]},{"teal":191,"source":"contracts/TossUp.algo.ts:43","pc":[211]},{"teal":192,"source":"contracts/TossUp.algo.ts:43","pc":[212,213]},{"teal":197,"source":"contracts/TossUp.algo.ts:46","pc":[214,215]},{"teal":200,"source":"contracts/TossUp.algo.ts:19","pc":[216,217]},{"teal":203,"source":"contracts/TossUp.algo.ts:19","pc":[218,219]},{"teal":204,"source":"contracts/TossUp.algo.ts:19","pc":[220]},{"teal":209,"source":"contracts/TossUp.algo.ts:49","pc":[221]},{"teal":212,"source":"contracts/TossUp.algo.ts:50","pc":[222,223,224]},{"teal":213,"source":"contracts/TossUp.algo.ts:50","pc":[225]},{"teal":214,"source":"contracts/TossUp.algo.ts:50","pc":[226]},{"teal":215,"source":"contracts/TossUp.algo.ts:50","pc":[227,228]},{"teal":216,"source":"contracts/TossUp.algo.ts:50","pc":[229]},{"teal":219,"source":"contracts/TossUp.algo.ts:50","errorMessage":"argument 0 (player) for play must be a address","pc":[230]},{"teal":222,"source":"contracts/TossUp.algo.ts:50","pc":[231,232]},{"teal":223,"source":"contracts/TossUp.algo.ts:50","pc":[233]},{"teal":224,"source":"contracts/TossUp.algo.ts:50","pc":[234]},{"teal":225,"source":"contracts/TossUp.algo.ts:50","pc":[235]},{"teal":226,"source":"contracts/TossUp.algo.ts:50","pc":[236,237]},{"teal":227,"source":"contracts/TossUp.algo.ts:50","pc":[238]},{"teal":228,"source":"contracts/TossUp.algo.ts:50","pc":[239]},{"teal":231,"source":"contracts/TossUp.algo.ts:50","errorMessage":"argument 1 (payment) for play must be a pay transaction","pc":[240]},{"teal":234,"source":"contracts/TossUp.algo.ts:49","pc":[241,242,243]},{"teal":235,"source":"contracts/TossUp.algo.ts:49","pc":[244]},{"teal":236,"source":"contracts/TossUp.algo.ts:49","pc":[245]},{"teal":237,"source":"contracts/TossUp.algo.ts:49","pc":[246]},{"teal":238,"source":"contracts/TossUp.algo.ts:49","pc":[247]},{"teal":239,"source":"contracts/TossUp.algo.ts:49","pc":[248]},{"teal":243,"source":"contracts/TossUp.algo.ts:49","pc":[249,250,251]},{"teal":246,"source":"contracts/TossUp.algo.ts:49","pc":[252]},{"teal":250,"source":"contracts/TossUp.algo.ts:51","pc":[253,254]},{"teal":251,"source":"contracts/TossUp.algo.ts:51","pc":[255]},{"teal":252,"source":"contracts/TossUp.algo.ts:51","pc":[256]},{"teal":253,"source":"contracts/TossUp.algo.ts:51","pc":[257]},{"teal":256,"source":"contracts/TossUp.algo.ts:51","errorMessage":"asserts failed: asserts(player !== this.owner.value, this.amount.value === payment.amount, this.txn.sender === this.app.creator)","pc":[258]},{"teal":257,"source":"contracts/TossUp.algo.ts:51","pc":[259]},{"teal":258,"source":"contracts/TossUp.algo.ts:51","pc":[260]},{"teal":259,"source":"contracts/TossUp.algo.ts:51","pc":[261,262]},{"teal":260,"source":"contracts/TossUp.algo.ts:51","pc":[263,264]},{"teal":261,"source":"contracts/TossUp.algo.ts:51","pc":[265]},{"teal":264,"source":"contracts/TossUp.algo.ts:51","errorMessage":"asserts failed: asserts(player !== this.owner.value, this.amount.value === payment.amount, this.txn.sender === this.app.creator)","pc":[266]},{"teal":265,"source":"contracts/TossUp.algo.ts:51","pc":[267,268]},{"teal":266,"source":"contracts/TossUp.algo.ts:51","pc":[269,270,271]},{"teal":267,"source":"contracts/TossUp.algo.ts:51","pc":[272,273]},{"teal":268,"source":"contracts/TossUp.algo.ts:51","pc":[274]},{"teal":269,"source":"contracts/TossUp.algo.ts:51","pc":[275]},{"teal":272,"source":"contracts/TossUp.algo.ts:51","errorMessage":"asserts failed: asserts(player !== this.owner.value, this.amount.value === payment.amount, this.txn.sender === this.app.creator)","pc":[276]},{"teal":276,"source":"contracts/TossUp.algo.ts:53","pc":[277,278]},{"teal":277,"source":"contracts/TossUp.algo.ts:53","pc":[279,280,281]},{"teal":278,"source":"contracts/TossUp.algo.ts:53","pc":[282,283]},{"teal":283,"source":"contracts/TossUp.algo.ts:55","pc":[284,285]},{"teal":284,"source":"contracts/TossUp.algo.ts:55","pc":[286,287]},{"teal":285,"source":"contracts/TossUp.algo.ts:55","pc":[288]},{"teal":286,"source":"contracts/TossUp.algo.ts:55","pc":[289]},{"teal":287,"source":"contracts/TossUp.algo.ts:55","pc":[290]},{"teal":288,"source":"contracts/TossUp.algo.ts:55","pc":[291,292,293]},{"teal":293,"source":"contracts/TossUp.algo.ts:56","pc":[294]},{"teal":294,"source":"contracts/TossUp.algo.ts:56","pc":[295]},{"teal":295,"source":"contracts/TossUp.algo.ts:56","pc":[296,297]},{"teal":299,"source":"contracts/TossUp.algo.ts:56","pc":[298]},{"teal":300,"source":"contracts/TossUp.algo.ts:56","pc":[299]},{"teal":301,"source":"contracts/TossUp.algo.ts:56","pc":[300,301]},{"teal":305,"source":"contracts/TossUp.algo.ts:56","pc":[302]},{"teal":306,"source":"contracts/TossUp.algo.ts:56","pc":[303]},{"teal":307,"source":"contracts/TossUp.algo.ts:56","pc":[304,305]},{"teal":308,"source":"contracts/TossUp.algo.ts:56","pc":[306,307]},{"teal":309,"source":"contracts/TossUp.algo.ts:56","pc":[308]},{"teal":310,"source":"contracts/TossUp.algo.ts:56","pc":[309,310]},{"teal":313,"source":"contracts/TossUp.algo.ts:56","pc":[311]},{"teal":314,"source":"contracts/TossUp.algo.ts:56","pc":[312,313]},{"teal":317,"source":"contracts/TossUp.algo.ts:56","pc":[314]},{"teal":318,"source":"contracts/TossUp.algo.ts:55","pc":[315,316,317]},{"teal":323,"source":"contracts/TossUp.algo.ts:58","pc":[318]},{"teal":324,"source":"contracts/TossUp.algo.ts:58","pc":[319]},{"teal":325,"source":"contracts/TossUp.algo.ts:58","pc":[320,321]},{"teal":329,"source":"contracts/TossUp.algo.ts:58","pc":[322,323]},{"teal":330,"source":"contracts/TossUp.algo.ts:58","pc":[324,325]},{"teal":334,"source":"contracts/TossUp.algo.ts:58","pc":[326]},{"teal":335,"source":"contracts/TossUp.algo.ts:58","pc":[327]},{"teal":336,"source":"contracts/TossUp.algo.ts:58","pc":[328,329]},{"teal":337,"source":"contracts/TossUp.algo.ts:58","pc":[330,331]},{"teal":338,"source":"contracts/TossUp.algo.ts:58","pc":[332]},{"teal":339,"source":"contracts/TossUp.algo.ts:58","pc":[333,334]},{"teal":342,"source":"contracts/TossUp.algo.ts:58","pc":[335]},{"teal":343,"source":"contracts/TossUp.algo.ts:58","pc":[336,337]},{"teal":346,"source":"contracts/TossUp.algo.ts:58","pc":[338]},{"teal":351,"source":"contracts/TossUp.algo.ts:61","pc":[339]},{"teal":352,"source":"contracts/TossUp.algo.ts:61","pc":[340]},{"teal":353,"source":"contracts/TossUp.algo.ts:61","pc":[341,342]},{"teal":357,"source":"contracts/TossUp.algo.ts:61","pc":[343]},{"teal":358,"source":"contracts/TossUp.algo.ts:61","pc":[344]},{"teal":359,"source":"contracts/TossUp.algo.ts:61","pc":[345,346]},{"teal":362,"source":"contracts/TossUp.algo.ts:61","pc":[347]},{"teal":363,"source":"contracts/TossUp.algo.ts:61","pc":[348,349]},{"teal":366,"source":"contracts/TossUp.algo.ts:61","pc":[350]},{"teal":370,"source":"contracts/TossUp.algo.ts:62","pc":[351,352]},{"teal":371,"source":"contracts/TossUp.algo.ts:62","pc":[353,354]},{"teal":372,"source":"contracts/TossUp.algo.ts:62","pc":[355]},{"teal":375,"source":"contracts/TossUp.algo.ts:49","pc":[356,357]},{"teal":376,"source":"contracts/TossUp.algo.ts:49","pc":[358]},{"teal":379,"source":"contracts/TossUp.algo.ts:3","pc":[359,360,361,362,363,364]},{"teal":380,"source":"contracts/TossUp.algo.ts:3","pc":[365,366,367]},{"teal":381,"source":"contracts/TossUp.algo.ts:3","pc":[368,369,370,371]},{"teal":384,"source":"contracts/TossUp.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[372]},{"teal":387,"source":"contracts/TossUp.algo.ts:3","pc":[373,374,375,376,377,378]},{"teal":388,"source":"contracts/TossUp.algo.ts:3","pc":[379,380,381]},{"teal":389,"source":"contracts/TossUp.algo.ts:3","pc":[382,383,384,385]},{"teal":392,"source":"contracts/TossUp.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[386]},{"teal":395,"source":"contracts/TossUp.algo.ts:3","pc":[387,388,389,390,391,392]},{"teal":396,"source":"contracts/TossUp.algo.ts:3","pc":[393,394,395]},{"teal":397,"source":"contracts/TossUp.algo.ts:3","pc":[396,397,398,399]},{"teal":400,"source":"contracts/TossUp.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[400]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"byteCode":{"approval":"CyAGAQAY/////w8CICYEAAVvd25lcgZhbW91bnQEFR98dTEYFIEGCzEZCI0MATAAAAAAAAAAAAE+ASIAAAAAAAAAAAAAAIgAAiJDigAAiSs2GgFJFSEFEkQxFiIJSTgQIhJEiAAEULAiQ4oCAYv/OAgjDUQpi/5nKov/OAhnKWSJigEBKEcFMQIiCdEAMQIiCdEBJBhbJBiMATECIgnRAowCi/+LAVslGIwDKWSLAVslGIwEiwOLBAskGIwFiwIyAxJBAAqL/4sFW4wAQgAHiwKLBVuMAIsAjABGBYkrNhoBSRUhBRJEMRYiCUk4ECISRIgABRZQsCJDigIBKIv+KWQTRCpki/84CBJEMQA2MgByB0gSRIv+iP9njACLACEEGCMSQQAYsSKyEClksgcqZIv/OAgIsggjsgGzQgAVsSKyEIv+sgcqZIv/OAgIsggjsgGzsSKyEClksgkjsgGziwAhBBiMAImABLhEezY2GgCOAf7SAIAE5tbZ5jYaAI4B/s0AgAQVXO/6NhoAjgH/TQA=","clear":"Cw=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the TossUp contract
 */
export type TossUpArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'register(pay,address)address': {
      payment: AppMethodCallTransactionArgument
      owner: string
    }
    'play(pay,address)uint64': {
      payment: AppMethodCallTransactionArgument
      player: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'register(pay,address)address': [payment: AppMethodCallTransactionArgument, owner: string]
    'play(pay,address)uint64': [payment: AppMethodCallTransactionArgument, player: string]
  }
}

/**
 * The return type for each method
 */
export type TossUpReturns = {
  'createApplication()void': void
  'register(pay,address)address': string
  'play(pay,address)uint64': bigint
}

/**
 * Defines the types of available calls and state of the TossUp smart contract.
 */
export type TossUpTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: TossUpArgs['obj']['createApplication()void']
      argsTuple: TossUpArgs['tuple']['createApplication()void']
      returns: TossUpReturns['createApplication()void']
    }>
    & Record<'register(pay,address)address' | 'register', {
      argsObj: TossUpArgs['obj']['register(pay,address)address']
      argsTuple: TossUpArgs['tuple']['register(pay,address)address']
      returns: TossUpReturns['register(pay,address)address']
    }>
    & Record<'play(pay,address)uint64' | 'play', {
      argsObj: TossUpArgs['obj']['play(pay,address)uint64']
      argsTuple: TossUpArgs['tuple']['play(pay,address)uint64']
      returns: TossUpReturns['play(pay,address)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        owner: string
        amount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TossUpSignatures = keyof TossUpTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TossUpNonVoidMethodSignatures = keyof TossUpTypes['methods'] extends infer T ? T extends keyof TossUpTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TossUp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TossUpSignatures> = TossUpTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TossUp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TossUpSignatures> = TossUpTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = TossUpTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TossUpCreateCallParams =
  | Expand<CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type TossUpDeleteCallParams =
  | Expand<CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']> & {method: 'play'}>
  | Expand<CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']> & {method: 'play(pay,address)uint64'}>
/**
 * Defines arguments required for the deploy method.
 */
export type TossUpDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TossUpCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: TossUpDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TossUp smart contract
 */
export abstract class TossUpParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TossUpCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return TossUpParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the TossUp smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends TossUpDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'play':
          case 'play(pay,address)uint64':
            return TossUpParamsFactory.delete.play(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the TossUp smart contract using the play(pay,address)uint64 ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      play(params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'play(pay,address)uint64' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.player],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the register(pay,address)address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static register(params: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'register(pay,address)address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.owner],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TossUp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TossUpFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TossUpFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TossUpClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TossUpClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TossUp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TossUpDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TossUpParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TossUpCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? TossUpParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (TossUpDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TossUpClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TossUp smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(TossUpParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the TossUp smart contract using the play(pay,address)uint64 ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      play: (params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>) => {
        return this.appFactory.params.deployDelete(TossUpParamsFactory.delete.play(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TossUp smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(TossUpParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TossUp smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TossUpArgs['obj']['createApplication()void'] | TossUpArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(TossUpParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TossUpReturns['createApplication()void']) }, appClient: new TossUpClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TossUp smart contract
 */
export class TossUpClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TossUpClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TossUp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TossUpClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TossUpNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TossUpClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TossUpClient> {
    return new TossUpClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TossUpClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TossUpClient> {
    return new TossUpClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TossUp smart contract using the `play(pay,address)uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      play: (params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>) => {
        return this.appClient.params.delete(TossUpParamsFactory.delete.play(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the TossUp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TossUp smart contract using the `register(pay,address)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    register: (params: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TossUpParamsFactory.register(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TossUp smart contract using the `play(pay,address)uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      play: (params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>) => {
        return this.appClient.createTransaction.delete(TossUpParamsFactory.delete.play(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the TossUp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TossUp smart contract using the `register(pay,address)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    register: (params: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TossUpParamsFactory.register(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the TossUp smart contract using the `play(pay,address)uint64` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      play: async (params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']> & SendParams) => {
        const result = await this.appClient.send.delete(TossUpParamsFactory.delete.play(params))
        return {...result, return: result.return as unknown as (undefined | TossUpReturns['play(pay,address)uint64'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the TossUp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TossUp smart contract using the `register(pay,address)address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    register: async (params: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TossUpParamsFactory.register(params))
      return {...result, return: result.return as unknown as (undefined | TossUpReturns['register(pay,address)address'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TossUpClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TossUp app
   */
  state = {
    /**
     * Methods to access global state for the current TossUp app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          owner: result.owner,
          amount: result.amount,
        }
      },
      /**
       * Get the current value of the owner key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("owner")) as string | undefined },
      /**
       * Get the current value of the amount key in global state
       */
      amount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("amount")) as bigint | undefined },
    },
  }

  public newGroup(): TossUpComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a register(pay,address)address method call against the TossUp contract
       */
      register(params: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.register(params)))
        resultMappers.push((v) => client.decodeReturnValue('register(pay,address)address', v))
        return this
      },
      get delete() {
        return {
          play: (params: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.play(params)))
            resultMappers.push((v) => client.decodeReturnValue('play(pay,address)uint64', v))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the TossUp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TossUpComposer
  }
}
export type TossUpComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the register(pay,address)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(params?: CallParams<TossUpArgs['obj']['register(pay,address)address'] | TossUpArgs['tuple']['register(pay,address)address']>): TossUpComposer<[...TReturns, TossUpReturns['register(pay,address)address'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the TossUp smart contract using the play(pay,address)uint64 ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    play(params?: CallParams<TossUpArgs['obj']['play(pay,address)uint64'] | TossUpArgs['tuple']['play(pay,address)uint64']>): TossUpComposer<[...TReturns, TossUpReturns['play(pay,address)uint64'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the TossUp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TossUpComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TossUpComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TossUpComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TossUpComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TossUpComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TossUpComposerResults<TReturns>>
}
export type TossUpComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

