/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"GameMaker","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"register","args":[{"name":"payment","type":"pay"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"play","args":[{"name":"payment","type":"pay"},{"name":"appID","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"ownerWins":{"key":"b3duZXJXaW5z","keyType":"AVMBytes","valueType":"uint64"},"playerWins":{"key":"cGxheWVyV2lucw==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/GameMaker.algo.ts:6","pc":[0]},{"teal":2,"source":"contracts/GameMaker.algo.ts:6","pc":[1,2,3,4,5]},{"teal":3,"source":"contracts/GameMaker.algo.ts:6","pc":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]},{"teal":15,"source":"contracts/GameMaker.algo.ts:6","pc":[35,36]},{"teal":16,"source":"contracts/GameMaker.algo.ts:6","pc":[37]},{"teal":17,"source":"contracts/GameMaker.algo.ts:6","pc":[38]},{"teal":18,"source":"contracts/GameMaker.algo.ts:6","pc":[39]},{"teal":19,"source":"contracts/GameMaker.algo.ts:6","pc":[40,41]},{"teal":20,"source":"contracts/GameMaker.algo.ts:6","pc":[42]},{"teal":21,"source":"contracts/GameMaker.algo.ts:6","pc":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68]},{"teal":25,"source":"contracts/GameMaker.algo.ts:6","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[69]},{"teal":30,"source":"contracts/GameMaker.algo.ts:13","pc":[70,71,72]},{"teal":31,"source":"contracts/GameMaker.algo.ts:13","pc":[73]},{"teal":32,"source":"contracts/GameMaker.algo.ts:13","pc":[74]},{"teal":36,"source":"contracts/GameMaker.algo.ts:13","pc":[75,76,77]},{"teal":40,"source":"contracts/GameMaker.algo.ts:14","pc":[78]},{"teal":41,"source":"contracts/GameMaker.algo.ts:14","pc":[79]},{"teal":42,"source":"contracts/GameMaker.algo.ts:14","pc":[80]},{"teal":46,"source":"contracts/GameMaker.algo.ts:15","pc":[81]},{"teal":47,"source":"contracts/GameMaker.algo.ts:15","pc":[82]},{"teal":48,"source":"contracts/GameMaker.algo.ts:15","pc":[83]},{"teal":49,"source":"contracts/GameMaker.algo.ts:13","pc":[84]},{"teal":54,"source":"contracts/GameMaker.algo.ts:18","pc":[85,86,87,88,89,90]},{"teal":57,"source":"contracts/GameMaker.algo.ts:18","pc":[91,92]},{"teal":58,"source":"contracts/GameMaker.algo.ts:18","pc":[93]},{"teal":59,"source":"contracts/GameMaker.algo.ts:18","pc":[94]},{"teal":60,"source":"contracts/GameMaker.algo.ts:18","pc":[95]},{"teal":61,"source":"contracts/GameMaker.algo.ts:18","pc":[96,97]},{"teal":62,"source":"contracts/GameMaker.algo.ts:18","pc":[98]},{"teal":63,"source":"contracts/GameMaker.algo.ts:18","pc":[99]},{"teal":66,"source":"contracts/GameMaker.algo.ts:18","errorMessage":"argument 0 (payment) for register must be a pay transaction","pc":[100]},{"teal":69,"source":"contracts/GameMaker.algo.ts:18","pc":[101,102,103]},{"teal":70,"source":"contracts/GameMaker.algo.ts:18","pc":[104]},{"teal":71,"source":"contracts/GameMaker.algo.ts:18","pc":[105]},{"teal":72,"source":"contracts/GameMaker.algo.ts:18","pc":[106]},{"teal":73,"source":"contracts/GameMaker.algo.ts:18","pc":[107]},{"teal":74,"source":"contracts/GameMaker.algo.ts:18","pc":[108]},{"teal":78,"source":"contracts/GameMaker.algo.ts:18","pc":[109,110,111]},{"teal":81,"source":"contracts/GameMaker.algo.ts:18","pc":[112]},{"teal":82,"source":"contracts/GameMaker.algo.ts:18","pc":[113,114]},{"teal":87,"source":"contracts/GameMaker.algo.ts:19","pc":[115,116]},{"teal":88,"source":"contracts/GameMaker.algo.ts:19","pc":[117,118]},{"teal":89,"source":"contracts/GameMaker.algo.ts:19","pc":[119]},{"teal":90,"source":"contracts/GameMaker.algo.ts:19","pc":[120]},{"teal":93,"source":"contracts/GameMaker.algo.ts:19","errorMessage":"transaction verification failed: {\"txn\":\"payment\",\"field\":\"amount\",\"condition\":\"greaterThan\",\"expected\":\">0\"}","pc":[121]},{"teal":97,"source":"contracts/GameMaker.algo.ts:21","pc":[122,123]},{"teal":98,"source":"contracts/GameMaker.algo.ts:21","pc":[124,125]},{"teal":99,"source":"contracts/GameMaker.algo.ts:21","pc":[126]},{"teal":100,"source":"contracts/GameMaker.algo.ts:21","pc":[127,128]},{"teal":112,"source":"contracts/GameMaker.algo.ts:23","pc":[129]},{"teal":113,"source":"contracts/GameMaker.algo.ts:23","pc":[130]},{"teal":114,"source":"contracts/GameMaker.algo.ts:23","pc":[131,132]},{"teal":115,"source":"contracts/GameMaker.algo.ts:23","pc":[133]},{"teal":116,"source":"contracts/GameMaker.algo.ts:23","pc":[134,135]},{"teal":120,"source":"contracts/GameMaker.algo.ts:24","pc":[136,137,138]},{"teal":121,"source":"contracts/GameMaker.algo.ts:24","pc":[139,140]},{"teal":125,"source":"contracts/GameMaker.algo.ts:25","pc":[141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544]},{"teal":126,"source":"contracts/GameMaker.algo.ts:25","pc":[545,546]},{"teal":132,"source":"contracts/GameMaker.algo.ts:27","pc":[547]},{"teal":133,"source":"contracts/GameMaker.algo.ts:27","pc":[548,549]},{"teal":137,"source":"contracts/GameMaker.algo.ts:28","pc":[550]},{"teal":138,"source":"contracts/GameMaker.algo.ts:28","pc":[551,552]},{"teal":142,"source":"contracts/GameMaker.algo.ts:29","pc":[553]},{"teal":143,"source":"contracts/GameMaker.algo.ts:29","pc":[554,555]},{"teal":147,"source":"contracts/GameMaker.algo.ts:30","pc":[556]},{"teal":148,"source":"contracts/GameMaker.algo.ts:30","pc":[557,558]},{"teal":151,"source":"contracts/GameMaker.algo.ts:23","pc":[559]},{"teal":152,"source":"contracts/GameMaker.algo.ts:23","pc":[560,561]},{"teal":155,"source":"contracts/GameMaker.algo.ts:23","pc":[562]},{"teal":159,"source":"contracts/GameMaker.algo.ts:32","pc":[563,564]},{"teal":160,"source":"contracts/GameMaker.algo.ts:32","pc":[565,566]},{"teal":161,"source":"contracts/GameMaker.algo.ts:32","pc":[567]},{"teal":162,"source":"contracts/GameMaker.algo.ts:32","pc":[568,569]},{"teal":163,"source":"contracts/GameMaker.algo.ts:32","pc":[570]},{"teal":164,"source":"contracts/GameMaker.algo.ts:32","pc":[571,572]},{"teal":168,"source":"contracts/GameMaker.algo.ts:34","pc":[573,574]},{"teal":169,"source":"contracts/GameMaker.algo.ts:34","pc":[575,576]},{"teal":176,"source":"contracts/GameMaker.algo.ts:37","pc":[577]},{"teal":177,"source":"contracts/GameMaker.algo.ts:37","pc":[578]},{"teal":178,"source":"contracts/GameMaker.algo.ts:37","pc":[579,580]},{"teal":182,"source":"contracts/GameMaker.algo.ts:37","pc":[581,582]},{"teal":183,"source":"contracts/GameMaker.algo.ts:37","pc":[583,584]},{"teal":184,"source":"contracts/GameMaker.algo.ts:37","pc":[585,586]},{"teal":185,"source":"contracts/GameMaker.algo.ts:37","pc":[587]},{"teal":186,"source":"contracts/GameMaker.algo.ts:37","pc":[588,589]},{"teal":190,"source":"contracts/GameMaker.algo.ts:37","pc":[590,591]},{"teal":191,"source":"contracts/GameMaker.algo.ts:37","pc":[592,593]},{"teal":192,"source":"contracts/GameMaker.algo.ts:37","pc":[594]},{"teal":193,"source":"contracts/GameMaker.algo.ts:37","pc":[595,596]},{"teal":196,"source":"contracts/GameMaker.algo.ts:37","pc":[597]},{"teal":197,"source":"contracts/GameMaker.algo.ts:37","pc":[598,599]},{"teal":198,"source":"contracts/GameMaker.algo.ts:35","pc":[600]},{"teal":199,"source":"contracts/GameMaker.algo.ts:35","pc":[601]},{"teal":200,"source":"contracts/GameMaker.algo.ts:35","pc":[602,603]},{"teal":201,"source":"contracts/GameMaker.algo.ts:35","pc":[604,605,606,607,608,609]},{"teal":202,"source":"contracts/GameMaker.algo.ts:35","pc":[610,611]},{"teal":206,"source":"contracts/GameMaker.algo.ts:36","pc":[612,613]},{"teal":207,"source":"contracts/GameMaker.algo.ts:36","pc":[614,615]},{"teal":211,"source":"contracts/GameMaker.algo.ts:37","pc":[616,617]},{"teal":212,"source":"contracts/GameMaker.algo.ts:37","pc":[618,619]},{"teal":215,"source":"contracts/GameMaker.algo.ts:35","pc":[620]},{"teal":216,"source":"contracts/GameMaker.algo.ts:35","pc":[621,622]},{"teal":219,"source":"contracts/GameMaker.algo.ts:35","pc":[623]},{"teal":220,"source":"contracts/GameMaker.algo.ts:35","pc":[624,625]},{"teal":221,"source":"contracts/GameMaker.algo.ts:35","pc":[626]},{"teal":222,"source":"contracts/GameMaker.algo.ts:35","pc":[627]},{"teal":223,"source":"contracts/GameMaker.algo.ts:35","pc":[628,629]},{"teal":224,"source":"contracts/GameMaker.algo.ts:35","pc":[630,631,632]},{"teal":228,"source":"contracts/GameMaker.algo.ts:40","pc":[633,634]},{"teal":231,"source":"contracts/GameMaker.algo.ts:18","pc":[635,636]},{"teal":234,"source":"contracts/GameMaker.algo.ts:18","pc":[637,638]},{"teal":235,"source":"contracts/GameMaker.algo.ts:18","pc":[639]},{"teal":240,"source":"contracts/GameMaker.algo.ts:43","pc":[640,641,642]},{"teal":241,"source":"contracts/GameMaker.algo.ts:43","pc":[643]},{"teal":244,"source":"contracts/GameMaker.algo.ts:43","pc":[644,645]},{"teal":245,"source":"contracts/GameMaker.algo.ts:43","pc":[646]},{"teal":246,"source":"contracts/GameMaker.algo.ts:43","pc":[647]},{"teal":247,"source":"contracts/GameMaker.algo.ts:43","pc":[648]},{"teal":248,"source":"contracts/GameMaker.algo.ts:43","pc":[649,650]},{"teal":249,"source":"contracts/GameMaker.algo.ts:43","pc":[651]},{"teal":250,"source":"contracts/GameMaker.algo.ts:43","pc":[652]},{"teal":253,"source":"contracts/GameMaker.algo.ts:43","errorMessage":"argument 1 (payment) for play must be a pay transaction","pc":[653]},{"teal":256,"source":"contracts/GameMaker.algo.ts:43","pc":[654,655,656]},{"teal":257,"source":"contracts/GameMaker.algo.ts:43","pc":[657]},{"teal":258,"source":"contracts/GameMaker.algo.ts:43","pc":[658]},{"teal":262,"source":"contracts/GameMaker.algo.ts:43","pc":[659,660,661]},{"teal":265,"source":"contracts/GameMaker.algo.ts:43","pc":[662]},{"teal":266,"source":"contracts/GameMaker.algo.ts:43","pc":[663]},{"teal":270,"source":"contracts/GameMaker.algo.ts:44","pc":[664,665]},{"teal":271,"source":"contracts/GameMaker.algo.ts:44","pc":[666,667,668,669,670,671,672]},{"teal":272,"source":"contracts/GameMaker.algo.ts:44","pc":[673]},{"teal":275,"source":"contracts/GameMaker.algo.ts:44","errorMessage":"global state value does not exist: appID.globalState('owner')","pc":[674]},{"teal":276,"source":"contracts/GameMaker.algo.ts:44","pc":[675,676]},{"teal":284,"source":"contracts/GameMaker.algo.ts:47","pc":[677]},{"teal":285,"source":"contracts/GameMaker.algo.ts:47","pc":[678]},{"teal":286,"source":"contracts/GameMaker.algo.ts:47","pc":[679,680]},{"teal":290,"source":"contracts/GameMaker.algo.ts:47","pc":[681,682]},{"teal":291,"source":"contracts/GameMaker.algo.ts:47","pc":[683,684]},{"teal":292,"source":"contracts/GameMaker.algo.ts:47","pc":[685,686]},{"teal":296,"source":"contracts/GameMaker.algo.ts:47","pc":[687,688]},{"teal":297,"source":"contracts/GameMaker.algo.ts:47","pc":[689,690]},{"teal":298,"source":"contracts/GameMaker.algo.ts:47","pc":[691]},{"teal":299,"source":"contracts/GameMaker.algo.ts:47","pc":[692,693]},{"teal":302,"source":"contracts/GameMaker.algo.ts:47","pc":[694]},{"teal":303,"source":"contracts/GameMaker.algo.ts:47","pc":[695,696]},{"teal":304,"source":"contracts/GameMaker.algo.ts:45","pc":[697]},{"teal":305,"source":"contracts/GameMaker.algo.ts:45","pc":[698]},{"teal":306,"source":"contracts/GameMaker.algo.ts:45","pc":[699,700]},{"teal":307,"source":"contracts/GameMaker.algo.ts:45","pc":[701,702,703,704,705,706]},{"teal":308,"source":"contracts/GameMaker.algo.ts:45","pc":[707,708]},{"teal":312,"source":"contracts/GameMaker.algo.ts:46","pc":[709,710]},{"teal":313,"source":"contracts/GameMaker.algo.ts:46","pc":[711,712]},{"teal":317,"source":"contracts/GameMaker.algo.ts:47","pc":[713,714]},{"teal":318,"source":"contracts/GameMaker.algo.ts:47","pc":[715,716]},{"teal":322,"source":"contracts/GameMaker.algo.ts:48","pc":[717,718]},{"teal":323,"source":"contracts/GameMaker.algo.ts:48","pc":[719,720]},{"teal":326,"source":"contracts/GameMaker.algo.ts:45","pc":[721]},{"teal":327,"source":"contracts/GameMaker.algo.ts:45","pc":[722,723]},{"teal":330,"source":"contracts/GameMaker.algo.ts:45","pc":[724]},{"teal":331,"source":"contracts/GameMaker.algo.ts:45","pc":[725,726]},{"teal":332,"source":"contracts/GameMaker.algo.ts:45","pc":[727]},{"teal":333,"source":"contracts/GameMaker.algo.ts:45","pc":[728]},{"teal":334,"source":"contracts/GameMaker.algo.ts:45","pc":[729,730]},{"teal":335,"source":"contracts/GameMaker.algo.ts:45","pc":[731,732,733]},{"teal":336,"source":"contracts/GameMaker.algo.ts:45","pc":[734]},{"teal":337,"source":"contracts/GameMaker.algo.ts:45","pc":[735,736]},{"teal":342,"source":"contracts/GameMaker.algo.ts:51","pc":[737,738]},{"teal":343,"source":"contracts/GameMaker.algo.ts:51","pc":[739]},{"teal":344,"source":"contracts/GameMaker.algo.ts:51","pc":[740]},{"teal":345,"source":"contracts/GameMaker.algo.ts:51","pc":[741,742,743]},{"teal":350,"source":"contracts/GameMaker.algo.ts:51","pc":[744]},{"teal":351,"source":"contracts/GameMaker.algo.ts:51","pc":[745]},{"teal":352,"source":"contracts/GameMaker.algo.ts:51","pc":[746]},{"teal":353,"source":"contracts/GameMaker.algo.ts:51","pc":[747]},{"teal":354,"source":"contracts/GameMaker.algo.ts:51","pc":[748]},{"teal":355,"source":"contracts/GameMaker.algo.ts:51","pc":[749]},{"teal":356,"source":"contracts/GameMaker.algo.ts:51","pc":[750]},{"teal":362,"source":"contracts/GameMaker.algo.ts:52","pc":[751,752]},{"teal":363,"source":"contracts/GameMaker.algo.ts:52","pc":[753]},{"teal":364,"source":"contracts/GameMaker.algo.ts:52","pc":[754]},{"teal":365,"source":"contracts/GameMaker.algo.ts:52","pc":[755,756,757]},{"teal":370,"source":"contracts/GameMaker.algo.ts:52","pc":[758]},{"teal":371,"source":"contracts/GameMaker.algo.ts:52","pc":[759]},{"teal":372,"source":"contracts/GameMaker.algo.ts:52","pc":[760]},{"teal":373,"source":"contracts/GameMaker.algo.ts:52","pc":[761]},{"teal":374,"source":"contracts/GameMaker.algo.ts:52","pc":[762]},{"teal":375,"source":"contracts/GameMaker.algo.ts:52","pc":[763]},{"teal":376,"source":"contracts/GameMaker.algo.ts:52","pc":[764]},{"teal":381,"source":"contracts/GameMaker.algo.ts:54","pc":[765]},{"teal":382,"source":"contracts/GameMaker.algo.ts:54","pc":[766]},{"teal":383,"source":"contracts/GameMaker.algo.ts:54","pc":[767,768]},{"teal":387,"source":"contracts/GameMaker.algo.ts:54","pc":[769,770]},{"teal":388,"source":"contracts/GameMaker.algo.ts:54","pc":[771,772]},{"teal":392,"source":"contracts/GameMaker.algo.ts:54","pc":[773,774,775,776]},{"teal":393,"source":"contracts/GameMaker.algo.ts:54","pc":[777,778]},{"teal":396,"source":"contracts/GameMaker.algo.ts:54","pc":[779]},{"teal":397,"source":"contracts/GameMaker.algo.ts:54","pc":[780,781]},{"teal":400,"source":"contracts/GameMaker.algo.ts:54","pc":[782]},{"teal":401,"source":"contracts/GameMaker.algo.ts:43","pc":[783]},{"teal":404,"source":"contracts/GameMaker.algo.ts:6","pc":[784]},{"teal":405,"source":"contracts/GameMaker.algo.ts:6","pc":[785,786,787]},{"teal":406,"source":"contracts/GameMaker.algo.ts:6","pc":[788,789,790,791]},{"teal":409,"source":"contracts/GameMaker.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[792]},{"teal":412,"source":"contracts/GameMaker.algo.ts:6","pc":[793,794,795,796,797,798]},{"teal":413,"source":"contracts/GameMaker.algo.ts:6","pc":[799,800,801,802,803,804]},{"teal":414,"source":"contracts/GameMaker.algo.ts:6","pc":[805,806,807]},{"teal":415,"source":"contracts/GameMaker.algo.ts:6","pc":[808,809,810,811,812,813]},{"teal":418,"source":"contracts/GameMaker.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[814]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"byteCode":{"approval":"CyADAQAGJgQACnBsYXllcldpbnMJb3duZXJXaW5zBLhEezYxGBQkCzEZCI0MAtQAAAAAAAAAAAAAAssAAAAAAAAAAAAAAIgAAiJDigAAKiNnKSNniYAEFR98dTEWIglJOBAiEkSIAAUWULAiQ4oBAShHAov/OAgjDUQyCnMBSIwAsSSyECuyGoABC7IfgJEDCyAGAQAY/////w8CICYEAAVvd25lcgZhbW91bnQEFR98dTEYFIEGCzEZCI0MATAAAAAAAAAAAAE+ASIAAAAAAAAAAAAAAIgAAiJDigAAiSs2GgFJFSEFEkQxFiIJSTgQIhJEiAAEULAiQ4oCAYv/OAgjDUQpi/5nKov/OAhnKWSJigEBKEcFMQIiCdEAMQIiCdEBJBhbJBiMATECIgnRAowCi/+LAVslGIwDKWSLAVslGIwEiwOLBAskGIwFiwIyAxJBAAqL/4sFW4wAQgAHiwKLBVuMAIsAjABGBYkrNhoBSRUhBRJEMRYiCUk4ECISRIgABRZQsCJDigIBKIv+KWQTRCpki/84CBJEMQA2MgByB0gSRIv+iP9njACLACEEGCMSQQAYsSKyEClksgcqZIv/OAgIsggjsgGzQgAVsSKyEIv+sgcqZIv/OAgIsggjsgGzsSKyEClksgkjsgGziwAhBBiMAImABLhEezY2GgCOAf7SAIAE5tbZ5jYaAI4B/s0AgAQVXO/6NhoAjgH/TQCyHiKyNSKyNCOyNyOyNiOyAbMyCnMBSIsACYwBtD2MArEishCL/zgIiwEJsgiLAnIISLIHI7IBtiSyEIAE5tbZ5rIaiwKyGDEAshojsgGztDsiCcU6VwQAiwKMAEYCiTYaARcxFiIJSTgQIhJEiAACIkOKAgAoSYv+gAVvd25lcmVEjACxIrIQi/84CLIIi/5yCEiyByOyAbYkshCABBVc7/qyGov+shgxALIagQWyGSOyAbO0OyIJxTpXBAAXjAGLASMSQQAHKmQiCCpMZ4sBIhJBAAcpZCIIKUxnsSKyEIsAsgeBxPIKsggjsgGziSs2GgCOAf0uAIAEzF0ECYAEG+yIvTYaAI4C/Sf/UgA=","clear":"Cw=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the GameMaker contract
 */
export type GameMakerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'register(pay)uint64': {
      payment: AppMethodCallTransactionArgument
    }
    'play(pay,uint64)void': {
      payment: AppMethodCallTransactionArgument
      appId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'register(pay)uint64': [payment: AppMethodCallTransactionArgument]
    'play(pay,uint64)void': [payment: AppMethodCallTransactionArgument, appId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type GameMakerReturns = {
  'createApplication()void': void
  'register(pay)uint64': bigint
  'play(pay,uint64)void': void
}

/**
 * Defines the types of available calls and state of the GameMaker smart contract.
 */
export type GameMakerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: GameMakerArgs['obj']['createApplication()void']
      argsTuple: GameMakerArgs['tuple']['createApplication()void']
      returns: GameMakerReturns['createApplication()void']
    }>
    & Record<'register(pay)uint64' | 'register', {
      argsObj: GameMakerArgs['obj']['register(pay)uint64']
      argsTuple: GameMakerArgs['tuple']['register(pay)uint64']
      returns: GameMakerReturns['register(pay)uint64']
    }>
    & Record<'play(pay,uint64)void' | 'play', {
      argsObj: GameMakerArgs['obj']['play(pay,uint64)void']
      argsTuple: GameMakerArgs['tuple']['play(pay,uint64)void']
      returns: GameMakerReturns['play(pay,uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        ownerWins: bigint
        playerWins: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type GameMakerSignatures = keyof GameMakerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type GameMakerNonVoidMethodSignatures = keyof GameMakerTypes['methods'] extends infer T ? T extends keyof GameMakerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the GameMaker smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends GameMakerSignatures> = GameMakerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the GameMaker smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GameMakerSignatures> = GameMakerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = GameMakerTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type GameMakerCreateCallParams =
  | Expand<CallParams<GameMakerArgs['obj']['createApplication()void'] | GameMakerArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<GameMakerArgs['obj']['createApplication()void'] | GameMakerArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type GameMakerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: GameMakerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the GameMaker smart contract
 */
export abstract class GameMakerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends GameMakerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return GameMakerParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the GameMaker smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<GameMakerArgs['obj']['createApplication()void'] | GameMakerArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the register(pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static register(params: CallParams<GameMakerArgs['obj']['register(pay)uint64'] | GameMakerArgs['tuple']['register(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'register(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the play(pay,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static play(params: CallParams<GameMakerArgs['obj']['play(pay,uint64)void'] | GameMakerArgs['tuple']['play(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'play(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment, params.args.appId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the GameMaker smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class GameMakerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `GameMakerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new GameMakerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new GameMakerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the GameMaker smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: GameMakerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? GameMakerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (GameMakerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new GameMakerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GameMaker smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<GameMakerArgs['obj']['createApplication()void'] | GameMakerArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(GameMakerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GameMaker smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<GameMakerArgs['obj']['createApplication()void'] | GameMakerArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(GameMakerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GameMaker smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<GameMakerArgs['obj']['createApplication()void'] | GameMakerArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(GameMakerParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | GameMakerReturns['createApplication()void']) }, appClient: new GameMakerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the GameMaker smart contract
 */
export class GameMakerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `GameMakerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the GameMaker app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `GameMakerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends GameMakerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `GameMakerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<GameMakerClient> {
    return new GameMakerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `GameMakerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<GameMakerClient> {
    return new GameMakerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the GameMaker smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the GameMaker smart contract using the `register(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    register: (params: CallParams<GameMakerArgs['obj']['register(pay)uint64'] | GameMakerArgs['tuple']['register(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GameMakerParamsFactory.register(params))
    },

    /**
     * Makes a call to the GameMaker smart contract using the `play(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    play: (params: CallParams<GameMakerArgs['obj']['play(pay,uint64)void'] | GameMakerArgs['tuple']['play(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GameMakerParamsFactory.play(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the GameMaker smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the GameMaker smart contract using the `register(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    register: (params: CallParams<GameMakerArgs['obj']['register(pay)uint64'] | GameMakerArgs['tuple']['register(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GameMakerParamsFactory.register(params))
    },

    /**
     * Makes a call to the GameMaker smart contract using the `play(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    play: (params: CallParams<GameMakerArgs['obj']['play(pay,uint64)void'] | GameMakerArgs['tuple']['play(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GameMakerParamsFactory.play(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the GameMaker smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the GameMaker smart contract using the `register(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    register: async (params: CallParams<GameMakerArgs['obj']['register(pay)uint64'] | GameMakerArgs['tuple']['register(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GameMakerParamsFactory.register(params))
      return {...result, return: result.return as unknown as (undefined | GameMakerReturns['register(pay)uint64'])}
    },

    /**
     * Makes a call to the GameMaker smart contract using the `play(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    play: async (params: CallParams<GameMakerArgs['obj']['play(pay,uint64)void'] | GameMakerArgs['tuple']['play(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GameMakerParamsFactory.play(params))
      return {...result, return: result.return as unknown as (undefined | GameMakerReturns['play(pay,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new GameMakerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current GameMaker app
   */
  state = {
    /**
     * Methods to access global state for the current GameMaker app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ownerWins: result.ownerWins,
          playerWins: result.playerWins,
        }
      },
      /**
       * Get the current value of the ownerWins key in global state
       */
      ownerWins: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ownerWins")) as bigint | undefined },
      /**
       * Get the current value of the playerWins key in global state
       */
      playerWins: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("playerWins")) as bigint | undefined },
    },
  }

  public newGroup(): GameMakerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a register(pay)uint64 method call against the GameMaker contract
       */
      register(params: CallParams<GameMakerArgs['obj']['register(pay)uint64'] | GameMakerArgs['tuple']['register(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.register(params)))
        resultMappers.push((v) => client.decodeReturnValue('register(pay)uint64', v))
        return this
      },
      /**
       * Add a play(pay,uint64)void method call against the GameMaker contract
       */
      play(params: CallParams<GameMakerArgs['obj']['play(pay,uint64)void'] | GameMakerArgs['tuple']['play(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.play(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the GameMaker contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as GameMakerComposer
  }
}
export type GameMakerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the register(pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(params?: CallParams<GameMakerArgs['obj']['register(pay)uint64'] | GameMakerArgs['tuple']['register(pay)uint64']>): GameMakerComposer<[...TReturns, GameMakerReturns['register(pay)uint64'] | undefined]>

  /**
   * Calls the play(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  play(params?: CallParams<GameMakerArgs['obj']['play(pay,uint64)void'] | GameMakerArgs['tuple']['play(pay,uint64)void']>): GameMakerComposer<[...TReturns, GameMakerReturns['play(pay,uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the GameMaker smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): GameMakerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): GameMakerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<GameMakerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<GameMakerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<GameMakerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<GameMakerComposerResults<TReturns>>
}
export type GameMakerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

